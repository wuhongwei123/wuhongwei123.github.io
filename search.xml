<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据可视化</title>
      <link href="2021/03/03/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>2021/03/03/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="目的和意义"><a href="#目的和意义" class="headerlink" title="目的和意义"></a>目的和意义</h4><p>数据可视化目的：借助图形手段，清晰有效的传达与沟通信息。<br>数据可视化吧数据从冰冷的数字转换为图形，揭示蕴含在数据中的道理和规律。</p><h4 id="目前常见的数据可视化库"><a href="#目前常见的数据可视化库" class="headerlink" title="目前常见的数据可视化库"></a>目前常见的数据可视化库</h4><p>D3.js 目前 Web 端评价最高的 Javascript 可视化工具库(入手难)<br>ECharts.js 百度出品的一个开源 Javascript 数据可视化库<br>Highcharts.js 国外的前端数据可视化库，非商用免费，被许多国外大公司所使用<br>AntV 蚂蚁金服全新一代数据可视化解决方案 等等<br>Highcharts 和 Echarts 就像是 Office 和 WPS 的关系</p><p>Echarts介绍与使用<br>ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖矢量图形库 ZRender，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p><p>可视化类型<br>ECharts 提供了常规的折线图、柱状图、散点图、饼图、K线图，用于统计的盒形图，用于地理数据可视化的地图、热力图、线图，用于关系数据可视化的关系图、treemap、旭日图，多维数据可视化的平行坐标，还有用于 BI 的漏斗图，仪表盘，并且支持图与图之间的混搭。</p><p>使用<br>官网地址: <a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a>.</p><p>文件下载地址：<a href="https://echarts.apache.org/zh/download.html">https://echarts.apache.org/zh/download.html</a><br>找到想要的版本进行下载</p><p>引入echarts 插件文件到html页面中</p><p>准备一个具备大小的DOM容器</p><p>初始化echarts实例对象<br>var myChart = echarts.init(document.getElementById(‘main’));</p><p>指定配置项和数据(option)<br>(这个一般从Echarts官网先找到需要的模板点击进入复制粘贴对应的代码)</p><p> var option = {<br>    title: {<br>        text: ‘堆叠区域图’<br>    },<br>    tooltip: {<br>        trigger: ‘axis’,<br>        axisPointer: {<br>            type: ‘cross’,<br>            label: {<br>                backgroundColor: ‘#6a7985’<br>            }<br>        }<br>    },<br>    legend: {<br>        data: [‘邮件营销’, ‘联盟广告’, ‘视频广告’, ‘直接访问’, ‘搜索引擎’]<br>    },<br>    toolbox: {<br>        feature: {<br>            saveAsImage: {}<br>        }<br>    },<br>    grid: {<br>        left: ‘3%’,<br>        right: ‘4%’,<br>        bottom: ‘3%’,<br>        containLabel: true<br>    },<br>    xAxis: [<br>        {<br>            type: ‘category’,<br>            boundaryGap: false,<br>            data: [‘周一’, ‘周二’, ‘周三’, ‘周四’, ‘周五’, ‘周六’, ‘周日’]<br>        }<br>    ],<br>    yAxis: [<br>        {<br>            type: ‘value’<br>        }<br>    ],<br>    series: [<br>        {<br>            name: ‘邮件营销’,<br>            type: ‘line’,<br>            stack: ‘总量’,<br>            areaStyle: {},<br>            data: [120, 132, 101, 134, 90, 230, 210]<br>        },<br>        {<br>            name: ‘联盟广告’,<br>            type: ‘line’,<br>            stack: ‘总量’,<br>            areaStyle: {},<br>            data: [220, 182, 191, 234, 290, 330, 310]<br>        },<br>        {<br>            name: ‘视频广告’,<br>            type: ‘line’,<br>            stack: ‘总量’,<br>            areaStyle: {},<br>            data: [150, 232, 201, 154, 190, 330, 410]<br>        },<br>        {<br>            name: ‘直接访问’,<br>            type: ‘line’,<br>            stack: ‘总量’,<br>            areaStyle: {},<br>            data: [320, 332, 301, 334, 390, 330, 320]<br>        },<br>        {<br>            name: ‘搜索引擎’,<br>            type: ‘line’,<br>            stack: ‘总量’,<br>            label: {<br>                normal: {<br>                    show: true,<br>                    position: ‘top’<br>                }<br>            },<br>            areaStyle: {},<br>            data: [820, 932, 901, 934, 1290, 1330, 1320]<br>        }<br>    ]<br>};<br>将配置项设置给echarts实例对象<br>myChart.setOption(option);<br>1<br>在这之前如果缩放窗口大小，图标是不会随窗口改变的，所以需要进行下面这一步。</p><p>// 图表跟随屏幕自适应变化<br>    window.addEventListener(“resize”,function(){<br>        myChart.resize();<br>    });</p><h4 id="Echarts-基础配置"><a href="#Echarts-基础配置" class="headerlink" title="Echarts-基础配置"></a>Echarts-基础配置</h4><p>series</p><p>系列列表。每个系列通过 type 决定自己的图表类型<br>（图标数据，指定什么类型的图标，可以多个图表重叠。）<br>xAxis：直角坐标系 grid 中的 x 轴</p><p>boundaryGap: 坐标轴两边留白策略 true，这时候刻度只是作为分隔线，标签和数据点都会在两个刻度之间的带(band)中间。<br>yAxis：直角坐标系 grid 中的 y 轴</p><p>grid：直角坐标系内绘图网格。</p><p>title：标题组件</p><p>tooltip：提示框组件</p><p>legend：图例组件</p><p>color：调色盘颜色列表</p><h4 id="具体案例"><a href="#具体案例" class="headerlink" title="具体案例"></a>具体案例</h4><p>// color设置我们线条的颜色 注意后面是个数组<br>    color: [‘pink’, ‘red’, ‘green’, ‘skyblue’]</p><p>// 设置图表的标题<br>    title: {<br>        text: ‘折线图堆叠123’<br>    },</p><p>// 图表的提示框组件<br>    tooltip: {<br>        // 触发方式<br>        trigger: ‘axis’<br>    },</p><p>// 图例组件<br>    legend: {<br>       // series里面有了 name值则 legend里面的data可以删掉<br>       textStyle:{<br>            //修改图例组件文字颜色<br>            color:’#4c9bfd’,<br>            right:’10%’<br>        }<br>    },</p><p>// 网格配置  grid可以控制线形图 柱状图 图表大小<br>    grid: {<br>        left: ‘3%’,<br>        right: ‘4%’,<br>        bottom: ‘3%’,<br>        // 是否显示刻度标签 如果是true 就显示 否则反之<br>        containLabel: true<br>    },</p><p>// 工具箱组件  可以另存为图片等功能<br>    toolbox: {<br>        feature: {<br>            saveAsImage: {}<br>        }<br>    },</p><p>// 设置x轴的相关配置<br>    xAxis: {<br>        type: ‘category’,<br>        // 是否让我们的线条和坐标轴有缝隙<br>        boundaryGap: false,<br>        data: [‘星期一’, ‘周二’, ‘周三’, ‘周四’, ‘周五’, ‘周六’, ‘周日’]<br>    },<br>// 设置y轴的相关配置<br>    yAxis: {<br>        type: ‘value’,<br>        splitLine:{<br>            lineStyle:{<br>                color:’#012f4a’//分割线颜色<br>            }<br>        }<br>        // 不显示Y轴的线<br>        axisLine:{<br>                show:false<br>        },<br>        // 不显示刻度<br>        axisTick:{<br>            show:false<br>        },<br>        // 把刻度标签里面的文字颜色设置为白色<br>        axisLabel:{<br>            color:”#fff”<br>        },<br>        // 不显示Y轴的线<br>        axisLine:{<br>                show:false<br>        },<br>        // 不显示刻度<br>        axisTick:{<br>            show:false<br>        },<br>        // 把刻度标签里面的文字颜色设置为白色<br>        axisLabel:{<br>            color:”#fff”<br>        }<br>    },</p><p>// 系列图表配置 它决定着显示那种类型的图表<br>    series: [<br>        {<br>            name: ‘邮件营销’,<br>            type: ‘line’,<br>            smooth:true,//让折线显示带弧度<br>            data: [120, 132, 101, 134, 90, 230, 210]<br>        },<br>        {<br>            name: ‘联盟广告’,<br>            type: ‘line’,</p><p>​            data: [220, 182, 191, 234, 290, 330, 310]<br>​         },<br> // 柱子之间的距离<br>barCategroyGap:50,<br>// 柱子的宽度<br>barWidth:10,<br>// 图形上显示的文本标签<br>label:{<br>​    show:true,<br>​    position:”inside”,<br>​    // {c}自动解析为数据<br>​    formatter:”{c}%”<br>},</p><p>]</p><h4 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h4><p>下面是我做的数据可视化案例</p><p><img src="./%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql常用命令</title>
      <link href="2021/02/03/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2021/02/03/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL-常用语句大全"><a href="#MySQL-常用语句大全" class="headerlink" title="MySQL 常用语句大全"></a>MySQL 常用语句大全</h3><p>一、连接 MySQL<br>格式： mysql -h 主机地址 -u 用户名 -p 用户密码</p><p>1、例 1：连接到本机上的 MYSQL。<br>首先在打开 DOS 窗口，然后进入目录 mysql bin，再键入命令 mysql -uroot -p，回<br>车后提示你输密码，如果刚安装好 MYSQL，超级用户 root 是没有密码的，故直接回车即<br>可进入到 MYSQL 中了，MYSQL 的提示符是： mysql&gt;</p><p>2、例 2：连接到远程主机上的 MYSQL。假设远程主机的 IP 为：110.110.110.110，<br>用户名为 root,密码为 abcd123。则键入以下命令：<br>mysql -h 110.110.110.110 -uroot -p abcd123<br>（注:u 与 root 可以不用加空格，其它也一样）</p><p>3、退出 MYSQL 命令： exit （回车）</p><p>二、修改密码<br>格式：mysqladmin -u 用户名 -p 旧密码 password 新密码</p><p>1、例 1：给 root 加个密码 ab12。首先在 DOS 下进入目录 mysql bin，然后键入以<br>下命令：<br>mysqladmin -uroot -password ab12<br>注：因为开始时 root 没有密码，所以-p 旧密码一项就可以省略了</p><p>2、例 2：再将 root 的密码改为 djg345。<br>mysqladmin -uroot -pab12 password djg345</p><p>三、增加新用户。<br>（注意：和上面不同，下面的因为是 MySQL 环境中的命令，所以后面都带一个分号作为命令结束符）<br>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”</p><p>例 1、增加一个用户 test1 密码为 abc，让他可以在任何主机上登录，并对所有数据库<br>有查询、插入、修改、删除的权限。首先用以 root 用户连入 MySQL，然后键入以下命令：<br>grant select,insert,update,<br>delete on <em>.</em> to test2@localhost identified by “abc”;<br>如果你不想 test2 有密码，可以再打一个命令将密码消掉。<br>grant select,insert,update,delete on mydb<br>.* to test2@localhost identified by “”;<br>在上面讲了登录、增加用户、密码更改等问题。下面我们来看看 MySQL 中有关数据库<br>方面的操作。注意：你必须首先登录到 MySQL 中，以下操作都是在 MySQL 的提示符下进<br>行的，而且每个命令以分号结束</p><p>1、MySQL 常用命令<br>create database name; 创建数据库<br>use databasename; 选择数据库<br>drop database name 直接删除数据库，不提醒<br>show tables; 显示表<br>describe tablename; 表的详细描述<br>select 中加上 distinct 去除重复字段<br>mysqladmin drop database name 删除数据库前，有提示。<br>在 mysql 中 select top 用法和 ms sqlserver 有所区别。若在 mysql 中实现 select top<br>功能得用：select * from tablename limit M,N, 这里 M 表示从（M+1）条记录开始，N表示返回的记录条数<br>显示当前 mysql 版本和当前日期<br>select version(),current_date;</p><p>2、修改 mysql 中 root 的密码：<br>shell&gt;mysql -u root -p<br>mysql&gt; update user set password=password(”xueok654123″) where user=’<br>root’;<br>mysql&gt; flush privileges //刷新数据库<br>mysql&gt;use dbname； 打开数据库：<br>mysql&gt;show databases; 显示所有数据库<br>mysql&gt;show tables; 显示数据库 mysql 中所有的表：先 use mysql；然后<br>mysql&gt;describe user; 显示表 mysql 数据库中 user 表的列信息）；</p><p>3、grant<br>创建一个可以从任何地方连接服务器的一个完全的超级用户，但是必须使用一个口令<br>something 做这个<br>mysql&gt; grant all privileges on <em>.</em> to user@localhost identified by ’something’<br>with<br>增加新用户<br>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”<br>GRANT ALL PRIVILEGES ON <em>.</em> TO monty@localhost IDENTIFIED BY ’<br>something’ WITH GRANT OPTION;<br>GRANT ALL PRIVILEGES ON <em>.</em> TO monty@”%” IDENTIFIED BY ’something’WITH GRANT OPTION;<br>删除授权：<br>mysql&gt; revoke all privileges on <em>.</em> from root@”%”;<br>mysql&gt; delete from user where user=”root” and host=”%”;<br>mysql&gt; flush privileges;<br>创建一个用户 custom 在特定客户端 it363.com 登录，可访问特定数据库 fangchandb<br>mysql &gt;grant select, insert, update, delete, create,drop on fangchandb.* to<br>custom@ it363.com identified by ‘ passwd’<br>重命名表:<br>mysql &gt; alter table t1 rename t2;</p><p>4、mysqldump<br>备份数据库<br>shell&gt; mysqldump -h host -u root -p dbname &gt;dbname_backup.sql<br>恢复数据库<br>shell&gt; mysqladmin -h myhost -u root -p create dbname<br>shell&gt; mysqldump -h host -u root -p dbname &lt; dbname_backup.sql<br>如果只想卸出建表指令，则命令如下：<br>shell&gt; mysqladmin -u root -p -d databasename &gt; a.sql<br>如果只想卸出插入数据的 sql 命令，而不需要建表命令，则命令如下：<br>shell&gt; mysqladmin -u root -p -t databasename &gt; a.sql<br>那么如果我只想要数据，而不想要什么 sql 命令时，应该如何操作呢？<br>mysqldump -T./ phptest driver其中，只有指定了-T 参数才可以卸出纯文本文件，表示卸出数据的目录，./表示当前目<br>录，即与 mysqldump 同一目录。如果不指定 driver 表，则将卸出整个数据库的数据。每<br>个表会生成两个文件，一个为.sql 文件，包含建表执行。另一个为.txt 文件，只包含数据，<br>且没有 sql 指令</p><p>5、可将查询存储在一个文件中并告诉 mysql 从文件中读取查询而不是等待键盘输入。<br>可利用外壳程序键入重定向实用程序来完成这项工作。例如，如果在文件 my_file.sql 中存<br>放有查<br>询，可如下执行这些查询：</p><p>例如，如果您想将建表语句提前写在 sql.txt 中:<br>mysql &gt; mysql -h myhost -u root -p database &lt; sql.txt</p><p>1、安装环境：<br>Windows XP<br>Mysql 4.0.17 从 下次就需要用 mysql -uroot -proot 才可以登陆<br>在远程或本机可以使用 mysql -h 172.5.1.183 -uroot 登陆，这个根据第二行的策略<br>确定<br>权限修改生效：<br>1)net stop mysql<br>net start mysql<br>2)c:\mysql\bin\mysqladmin flush-privileges<br>3)登陆 mysql 后，用 flush privileges 语句</p><p>6、创建数据库 staffer<br>create database staffer;</p><p>7、下面的语句在 mysql 环境在执行<br>显示用户拥有权限的数据库 show databases;<br>切换到 staffer 数据库 use staffer;<br>显示当前数据库中有权限的表 show tables;<br>显示表 staffer 的结构 desc staffer;</p><p>8、创建测试环境<br>1)创建数据库 staffer<br>mysql&gt; create database staffer<br>2)创建表 staffer,department,position,depart_pos<br>create table department<br>( id<br>int not null auto_increment,<br>name varchar(20) not null default ‘系统部’, #设定默认值<br>description varchar(100),<br>primary key PK_department (id) #设定主键<br>);<br>create table depart_pos<br>( d<br>epartment_id int not null,<br>position_id int not null,<br>primary key PK_depart_pos (department_id,position_id) #设定复和主键<br>);create table staffer<br>( id<br>int not null auto_increment primary key, #设定主键<br>name varchar(20) not null default ‘无名氏’, #设定默认值<br>department_id int not null,<br>position_id int not null,<br>unique (department_id,position_id) #设定唯一值<br>);<br>3)删除<br>mysql&gt;<br>drop table depart_pos;</p><p>9、修改结构 alter 命令<br>mysql&gt;</p><h4 id="表-position-增加列-test"><a href="#表-position-增加列-test" class="headerlink" title="表 position 增加列 test"></a>表 position 增加列 test</h4><p>alter table position add(test char(10));</p><h4 id="表-position-修改列-test"><a href="#表-position-修改列-test" class="headerlink" title="表 position 修改列 test"></a>表 position 修改列 test</h4><p>alter table position modify test char(20) not null;</p><h4 id="表-position-修改列-test-默认值"><a href="#表-position-修改列-test-默认值" class="headerlink" title="表 position 修改列 test 默认值"></a>表 position 修改列 test 默认值</h4><p>alter table position alter test set default ‘system’;</p><h4 id="表-position-去掉-test-默认值"><a href="#表-position-去掉-test-默认值" class="headerlink" title="表 position 去掉 test 默认值"></a>表 position 去掉 test 默认值</h4><p>alter table position alter test drop default;</p><h4 id="表-position-去掉列-testalter-table-position-drop-column-test"><a href="#表-position-去掉列-testalter-table-position-drop-column-test" class="headerlink" title="表 position 去掉列 testalter table position drop column test;"></a>表 position 去掉列 testalter table position drop column test;</h4><h4 id="表-depart-pos-删除主键"><a href="#表-depart-pos-删除主键" class="headerlink" title="表 depart_pos 删除主键"></a>表 depart_pos 删除主键</h4><p>alter table depart_pos drop primary key;</p><h4 id="表-depart-pos-增加主键"><a href="#表-depart-pos-增加主键" class="headerlink" title="表 depart_pos 增加主键"></a>表 depart_pos 增加主键</h4><p>alter table depart_pos add primary key PK_depart_pos<br>(department_id,position_id);</p><p>10、操作数据 insert 命令</p><h4 id="插入表-department"><a href="#插入表-department" class="headerlink" title="插入表 department"></a>插入表 department</h4><p>insert into department(name,description) values(‘系统部’,’系统部’);<br>insert into department(name,description) values(‘公关部’,’公关部’);<br>insert into department(name,description) values(‘客服部’,’客服部’);<br>insert into department(name,description) values(‘财务部’,’财务部’);<br>insert into department(name,description) values(‘测试部’,’测试部’);</p><h4 id="插入表-s-position"><a href="#插入表-s-position" class="headerlink" title="插入表 s_position"></a>插入表 s_position</h4><p>insert into s_position(name,description) values(‘总监’,’总监’);<br>insert into s_position(name,description) values(‘经理’,’经理’);<br>insert into s_position(name,description) values(‘普通员工’,’普通员工’);</p><h4 id="插入表-depart-pos"><a href="#插入表-depart-pos" class="headerlink" title="插入表 depart_pos"></a>插入表 depart_pos</h4><p>insert into depart_pos(department_id,position_id)<br>select a.id department_id,b.id postion_id<br>from department a,s_position b;</p><h4 id="插入表-stafferinsert-into-staffer-name-department-id-position-id-values-‘陈达治’-1-1"><a href="#插入表-stafferinsert-into-staffer-name-department-id-position-id-values-‘陈达治’-1-1" class="headerlink" title="插入表 stafferinsert into staffer(name,department_id,position_id) values(‘陈达治’,1,1);"></a>插入表 stafferinsert into staffer(name,department_id,position_id) values(‘陈达治’,1,1);</h4><p>insert into staffer(name,department_id,position_id) values(‘李文宾’,1,2);<br>insert into staffer(name,department_id,position_id) values(‘马佳’,1,3);<br>insert into staffer(name,department_id,position_id) values(‘亢志强’,5,1);<br>insert into staffer(name,department_id,position_id) values(‘杨玉茹’,4,1);</p><p>11、查询及删除操作 select、delete 命令</p><h4 id="显示系统部的人员和职位"><a href="#显示系统部的人员和职位" class="headerlink" title="显示系统部的人员和职位"></a>显示系统部的人员和职位</h4><p>select a.name,b.name department_name,c.name position_name<br>from staffer a,department b,s_position c<br>where a.department_id=b.id and a.position_id=c.id and b.name=’系统部’;</p><h4 id="显示系统部的人数"><a href="#显示系统部的人数" class="headerlink" title="显示系统部的人数"></a>显示系统部的人数</h4><p>select count(*) from staffer a,department b<br>where a.department_id=b.id and b.name=’系统部’</p><h4 id="显示各部门的人数"><a href="#显示各部门的人数" class="headerlink" title="显示各部门的人数"></a>显示各部门的人数</h4><p>select count(*) cou,b.name<br>from staffer a,department b<br>where a.department_id=b.id<br>group by b.name;</p><h4 id="删除客服部"><a href="#删除客服部" class="headerlink" title="删除客服部"></a>删除客服部</h4><p>delete from department where name=’客服部’;</p><h4 id="将财务部修改为财务一部"><a href="#将财务部修改为财务一部" class="headerlink" title="将财务部修改为财务一部"></a>将财务部修改为财务一部</h4><p>update department set name=’财务一部’ where name=’财务部’;</p><p>12、备份和恢复<br>备份数据库 staffer<br>c:\mysql\bin\mysqldump -uroot -proot staffer&gt;e:\staffer.sql<br>得到的 staffer.sql 是一个 sql 脚本，不包括建库的语句，所以你需要手工<br>创建数据库才可以导入<br>恢复数据库 staffer,需要创建一个空库 staffer<br>c:\mysql\bin\mysql -uroot -proot staffer&lt;staffer.sql<br>如果不希望后来手工创建 staffer,可以<br>c:\mysql\bin\mysqldump -uroot -proot –databases staffer&gt;e:\staffer.sql<br>mysql -uroot -proot &gt;e:\staffer.sql<br>但这样的话系统种就不能存在 staffer 库，且无法导入其他名字的数据库，<br>当然你可以手工修改 staffer.sql 文件</p><p>13、从文本向数据库导入数据<br>1)使用工具 c:\mysql\bin\mysqlimport<br>这个工具的作用是将文件导入到和去掉文件扩展名名字相同的表里，如<br>staffer.txt,staffer 都是导入到 staffer 表中<br>常用选项及功能如下<br>-d or –delete 新数据导入数据表中之前删除数据数据表中的所有信息<br>-f or –force 不管是否遇到错误，mysqlimport 将强制继续插入数据<br>-i or –ignore mysqlimport 跳过或者忽略那些有相同唯一<br>关键字的行， 导入文件中的数据将被忽略。<br>-l or -lock-tables 数据被插入之前锁住表，这样就防止了，你在更新数据库时，用户的查询和更新受到影响。<br>-r or -replace 这个选项与－i 选项的作用相反；此选项将替代<br>表中有相同唯一关键字的记录。<br>–fields-enclosed- by= char<br>指定文本文件中数据的记录时以什么括起的， 很多情况下<br>数据以双引号括起。 默认的情况下数据是没有被字符括起的。<br>–fields-terminated- by=char<br>指定各个数据的值之间的分隔符，在句号分隔的文件中，<br>分隔符是句号。您可以用此选项指定数据之间的分隔符。<br>默认的分隔符是跳格符（Tab）<br>–lines-terminated- by=str<br>此选项指定文本文件中行与行之间数据的分隔字符串<br>或者字符。 默认的情况下 mysqlimport 以 newline 为行分隔符</p><p>您可以选择用一个字符串来替代一个单个的字符：<br>一个新行或者一个回车。<br>mysqlimport 命令常用的选项还有-v 显示版本（version），<br>-p 提示输入密码（password）等。<br>这个工具有个问题，无法忽略某些列，这样对我们的数据导入有很大的麻烦，虽然<br>可以手工设置这个字段，但会出现莫名其妙的结果，我们做一个简单的示例<br>我们定义如下的 depart_no.txt，保存在 e 盘，间隔为制表符\t<br>10 10<br>11 1112 24<br>执行如下命令<br>c:\mysql\bin\mysqlimport -uroot -proot staffer e:\depart_pos.txt<br>在这里没有使用列的包围符号，分割采用默认的\t，因为采用别的符号会有问题，<br>不知道是不是 windows 的原因</p><p>2)Load Data INFILE file_name into table_name(column1_name,column2_name)<br>这个命令在 mysql&gt;提示符下使用，优点是可以指定列导入，示例如下<br>c:\mysql\bin\mysql -uroot -proot staffer<br>mysql&gt;load data infile “e:/depart_no.txt” into<br>depart_no(department_id,position_id);<br>这两个工具在 Windows 下使用都有问题，不知道是 Windows 的原因还是中文的问题，<br>而且不指定的列它产生了空值，这显然不是我们想要的，所以谨慎使用这些工具</p><p>进入 MySQL:mysql -uuser -ppassword –port=3307<br>1:使用 SHOW 语句找出在服务器上当前存在什么数据库：<br>mysql&gt; SHOW DATABASES;<br>2:2、创建一个数据库 MYSQLDATA<br>mysql&gt; Create DATABASE MYSQLDATA;<br>3:选择你所创建的数据库<br>mysql&gt; USE MYSQLDATA; (按回车键出现 Database changed 时说明操作成功！)<br>4:查看现在的数据库中存在什么表<br>mysql&gt; SHOW TABLES;<br>5:创建一个数据库表mysql&gt; Create TABLE MYTABLE (name VARCHAR(20), sex CHAR(1));<br>6:显示表的结构：<br>mysql&gt; DESCRIBE MYTABLE;<br>7:往表中加入记录<br>mysql&gt; insert into MYTABLE values (“hyq”,”M”);<br>8:用文本方式将数据装入数据库表中（例如 D:/mysql.txt）<br>mysql&gt; LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE MYTABLE;<br>9:导入.sql 文件命令（例如 D:/mysql.sql）<br>mysql&gt;use database;<br>mysql&gt;source d:/mysql.sql;<br>10:删除表<br>mysql&gt;drop TABLE MYTABLE;<br>11:清空表<br>mysql&gt;delete from MYTABLE;<br>12:更新表中数据 update 命令<br>mysql&gt;update MYTABLE set sex=”f” where name=’hyq’;<br>UPDATE [LOW_PRIORITY] [IGNORE] tbl_name<br>SET col_name1=expr1 [, col_name2=expr2 …]<br>[WHERE where_definition]<br>[ORDER BY …]<br>[LIMIT rows]<br>orUPDATE [LOW_PRIORITY] [IGNORE] tbl_name [, tbl_name …]<br>SET col_name1=expr1 [, col_name2=expr2 …]<br>[WHERE where_definition]<br>UPDATE 以新的值更新现存表中行的列。SET 子句指出要修改哪个列和他们应该给定<br>的值。WHERE<br>子句如果被给出，指定哪个记录行应该被更新。否则，所有的记录行被更新。如果<br>ORDER BY 子句被指定，记录行将被以指定的次序更新。<br>如果你指定关键词 LOW_PRIORITY，UPDATE 的执行将被延迟，直到没有其它的客<br>户端正在读取表。<br>如果你指定关键词 IGNORE，该更新语句将不会异常中止，即使在更新过程中出现重<br>复键错误。导致冲突的记录行将不会被更新。<br>如果在一个表达式中从 tbl_name 中访问一个列，UPDATE 使用列的当前值。举例来<br>说，下面的语句设置 age 列值为它的当前值加 1 ：<br>mysql&gt; UPDATE persondata SET age=age+1;<br>UPDATE 赋值是从左到右计算的。举例来说，下列语句将 age 列设置为它的两倍，<br>然后再加 1 ：<br>mysql&gt; UPDATE persondata SET age=age*2, age=age+1;<br>如果你设置列为其当前的值，MySQL 注意到这点，并不更新它。<br>UPDATE 返回实际被改变的记录行数目。在 MySQL 3.22 或更新的版本中，C API 函<br>数 mysql_info()<br>返回被匹配并更新的记录行数目，以及在 UPDATE 期间发生的警告的数目</p><p>在 MySQL 3.23 中，你可以使用 LIMIT # 来确保只有给定的记录行数目被更改。如果一个 ORDER BY 子句被使用(从 MySQL 4.0.0 开始支持)，记录行将以指定的次<br>序被更新。这实际上只有连同 LIMIT<br>一起才有用</p><p>从 MySQL 4.0.4 开始，你也可以执行一个包含多个表的 UPDATE 的操作：<br>UPDATE items,month SET items.price=month.price<br>WHERE items.id=month.id;<br>注意：多表 UPDATE 不可以使用 ORDER BY 或 LIMIT。<br>关键字: mysql<br>启动：net start mySql;<br>进入：mysql -u root -p/mysql -h localhost -u root -p databaseName;<br>列出数据库：show databases;<br>选择数据库：use databaseName;<br>列出表格：show tables；<br>显示表格列的属性：show columns from tableName；<br>建立数据库：source fileName.txt;<br>匹配字符：可以用通配符_代表任何一个字符，％代表任何字符串;<br>增加一个字段：alter table tabelName add column fieldName dateType;<br>增加多个字段：alter table tabelName add column fieldName1 dateType,add<br>columns fieldName2 dateType;<br>多行命令输入:注意不能将单词断开;当插入或更改数据时，不能将字段的字符串展开到<br>多行里，否则硬回车将被储存到数据中;<br>增加一个管理员帐户：grant all on <em>.</em> to user@localhost identified by “password”;每条语句输入完毕后要在末尾填加分号’;’，或者填加’\g’也可以；<br>查询时间：select now();<br>查询当前用户：select user();<br>查询数据库版本：select version();<br>查询当前使用的数据库：select database();</p><p>1、删除 student_course 数据库中的 students 数据表：<br>rm -f student_course/students.*</p><p>2、备份数据库：(将数据库 test 备份)<br>mysqldump -u root -p test&gt;c:\test.txt<br>备份表格：(备份 test 数据库下的 mytable 表格)<br>mysqldump -u root -p test mytable&gt;c:\test.txt<br>将备份数据导入到数据库：(导回 test 数据库)<br>mysql -u root -p test</p><p>3、创建临时表：(建立临时表 zengchao)<br>create temporary table zengchao(name varchar(10));</p><p>4、创建表是先判断表是否存在<br>create table if not exists students(……);</p><p>5、从已经有的表中复制表的结构<br>create table table2 select * from table1 where 1$amp;&lt;amp;$gt;1;&lt; p=””&gt;<br>6、复制表</p><p>create table table2 select * from table1;<br>7、对表重新命名alter table table1 rename as table2;</p><p>8、修改列的类型<br>alter table table1 modify id int unsigned;//修改列 id 的类型为 int unsigned<br>alter table table1 change id sid int unsigned;//修改列 id 的名字为 sid，而且把属<br>性修改为 int unsigned</p><p>9、创建索引<br>alter table table1 add index ind_id (id);<br>create index ind_id on table1 (id);<br>create unique index ind_id on table1 (id);//建立唯一性索引</p><p>10、删除索引<br>drop index idx_id on table1;<br>alter table table1 drop index ind_id;</p><p>11、联合字符或者多个列(将列 id 与”:”和列 name 和”=”连接)<br>select concat(id,’:’,name,’=’) from students;</p><p>12、limit(选出 10 到 20 条)&lt;第一个记录集的编号是 0&gt;<br>select * from students order by id limit 9,10;</p><p>13、MySQL 不支持的功能<br>事务，视图，外键和引用完整性，存储过程和触发器<br>14、MySQL 会使用索引的操作符号<br>&lt;,&lt;=,&gt;=,&gt;,=,between,in,不带%或者_开头的 like</p><p>15、使用索引的缺点<br>1)减慢增删改数据的速度；2）占用磁盘空间；<br>3）增加查询优化器的负担；<br>当查询优化器生成执行计划时，会考虑索引，太多的索引会给查询优化器增加工作量，<br>导致无法选择最优的查询方案；</p><p>16、分析索引效率<br>方法：在一般的 SQL 语句前加上 explain；<br>分析结果的含义：<br>1）table：表名；<br>2）type：连接的类型，(ALL/Range/Ref)。其中 ref 是最理想的；<br>3）possible_keys：查询可以利用的索引名；<br>4）key：实际使用的索引；<br>5）key_len：索引中被使用部分的长度（字节）；<br>6）ref：显示列名字或者”const”（不明白什么意思）；<br>7）rows：显示 MySQL 认为在找到正确结果之前必须扫描的行数；<br>8）extra：MySQL 的建议；</p><p>17、使用较短的定长列<br>1）尽可能使用较短的数据类型；<br>2）尽可能使用定长数据类型；<br>a）用 char 代替 varchar，固定长度的数据处理比变长的快些；<br>b）对于频繁修改的表，磁盘容易形成碎片，从而影响数据库的整体性能；<br>c）万一出现数据表崩溃，使用固定长度数据行的表更容易重新构造。使用固定长度的<br>数据行，每个记录的开始位置都是固定记录长度的倍数，可以很容易被检测到，但是使用可变长度的数据行就不一定了；<br>d）对于 MyISAM 类型的数据表，虽然转换成固定长度的数据列可以提高性能，但是<br>占据的空间也大；</p><p>18、使用 not null 和 enum<br>尽量将列定义为 not null，这样可使数据的出来更快，所需的空间更少，而且在查询时，<br>MySQL 不需要检查是否存在特例，即 null 值，从而优化查询；<br>如果一列只含有有限数目的特定值，如性别，是否有效或者入学年份等，在这种情况下<br>应该考虑将其转换为 enum 列的值，MySQL 处理的更快，因为所有的 enum 值在系统内<br>都是以标识数值来表示的；</p><p>19、使用 optimize table<br>对于经常修改的表，容易产生碎片，使在查询数据库时必须读取更多的磁盘块，降低查<br>询性能。具有可变长的表都存在磁盘碎片问题，这个问题对 blob 数据类型更为突出，因为<br>其尺寸变化非常大。可以通过使用 optimize table 来整理碎片，保证数据库性能不下降，<br>优化那些受碎片影响的数据表。optimize table 可以用于 MyISAM 和 BDB 类型的数据表。<br>实际上任何碎片整理方法都是用 mysqldump 来转存数据表，然后使用转存后的文件并重<br>新建数据表；</p><p>20、使用 procedure analyse()<br>可以使用 procedure analyse()显示最佳类型的建议，使用很简单，在 select 语句后面<br>加上 procedure analyse()就可以了；例如：<br>select * from students procedure analyse();<br>select * from students procedure analyse(16,256);<br>第二条语句要求 procedure analyse()不要建议含有多于 16 个值，或者含有多于 256字节的 enum 类型，如果没有限制，输出可能会很长；</p><p>21、使用查询缓存<br>1）查询缓存的工作方式：<br>第一次执行某条 select 语句时，服务器记住该查询的文本内容和查询结果，存储在缓<br>存中，下次碰到这个语句时，直接从缓存中返回结果；当更新数据表后，该数据表的任何缓<br>存查询都变成无效的，并且会被丢弃。<br>2）配置缓存参数：<br>变量：query_cache _type，查询缓存的操作模式。有 3 中模式，0：不缓存；1：缓<br>存查询，除非与 select sql_no_cache 开头；2：根据需要只缓存那些以 select sql_cache<br>开头的查询； query_cache_size：设置查询缓存的最大结果集的大小，比这个值大的不会<br>被缓存。</p><p>22、调整硬件<br>1）在机器上装更多的内存；<br>2）增加更快的硬盘以减少 I/O 等待时间；<br>寻道时间是决定性能的主要因素，逐字地移动磁头是最慢的，一旦磁头定位，从磁道读<br>则很快；<br>3）在不同的物理硬盘设备上重新分配磁盘活动；<br>如果可能，应将最繁忙的数据库存放在不同的物理设备上，这跟使用同一物理设备的不<br>同分区是不同的，因为它们将争用相同的物理资源（磁头）。Mysql 常见问题处理<br>1.Navicat 连接 MySQL 数据库时出现#1251 错误的解决方法<br>本来用 navicat 连接 mysql 数据库可以连接上，但是双击打不开，报 1251 错误码，后来<br>我改了一个比较短的密码就可以了。为什么。。。猜不透啊。<br>另外附录 msql8.0 版本的改密码方式：use mysql；<br>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘你的密<br>码’;<br>FLUSH PRIVILEGES;</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-app入门</title>
      <link href="2021/01/03/uni-app%E5%85%A5%E9%97%A8/"/>
      <url>2021/01/03/uni-app%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="uni-app简单介绍"><a href="#uni-app简单介绍" class="headerlink" title="uni-app简单介绍"></a>uni-app简单介绍</h2><h4 id="什么是uni-app？"><a href="#什么是uni-app？" class="headerlink" title="什么是uni-app？"></a>什么是uni-app？</h4><p>uni-app 是使用 Vue.js 开发跨平台应用的前端框架，开发者编写一套代码，可编译到iOS、Android、H5、小程序等多个平台。</p><h4 id="uni-app的优点"><a href="#uni-app的优点" class="headerlink" title="uni-app的优点"></a>uni-app的优点</h4><p>跨平台发行，运行体验更好</p><p>与小程序的组件、API一致；<br>兼容weex原生渲染，增加了开发效率高，但是由于weex坑比较多，建议还是使用局部渲染优化；<br>通用前端技术栈,学习成本更低</p><p>支持vue语法，微信小程序API<br>内嵌mpvue<br>开发生态,组件更丰富</p><p>支持通过npm安装第三方包<br>支持微信小程序自定义组件及JS SDK<br>兼容mpvue组件及项目(内嵌mpvue开源框架)<br>App端支持和原生混合编码<br>插件丰富,DCloud将发布插件到市场</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h4 id="1、安装HBuilderX"><a href="#1、安装HBuilderX" class="headerlink" title="1、安装HBuilderX"></a>1、安装HBuilderX</h4><p>HBuilderX内置相关环境，无需配置nodejs、vue等，三秒钟就可以创建一个项目。</p><p>小提示：ctril+N可以快速调转到新建选择类型</p><h4 id="2、创建uni-app"><a href="#2、创建uni-app" class="headerlink" title="2、创建uni-app"></a>2、创建uni-app</h4><p>新建项目，选择uni-app点击创建</p><h4 id="3、运行项目"><a href="#3、运行项目" class="headerlink" title="3、运行项目"></a>3、运行项目</h4><p>1.浏览器运行</p><p>2.真机运行</p><p>3.小程序运行</p><h4 id="4、官方提示"><a href="#4、官方提示" class="headerlink" title="4、官方提示"></a>4、官方提示</h4><p>static 目录下的 js 文件不会被编译，如果里面有 es6 的代码，不经过转换直接运行，在手机设备上会报错。<br>css、less/scss 等资源同样不要放在 static 目录下，建议这些公用的资源放在 common 目录下。</p><h2 id="学习框架"><a href="#学习框架" class="headerlink" title="学习框架"></a>学习框架</h2><h4 id="1-开发规范"><a href="#1-开发规范" class="headerlink" title="1.开发规范"></a>1.开发规范</h4><p>1.1 uni-app 约定的开发规范</p><p>页面文件遵循 Vue 单文件组件规范<br>组件标签靠近小程序规范<br>接口能力（JS API）靠近微信小程序规范，但需将前缀 wx 替换为 uni<br>数据绑定及事件处理同 Vue.js 规范，同时补充了App及页面的生命周期<br>为兼容多端运行，建议使用flex布局进行开发<br>1.2 uni-app 开发的注意事项</p><p>html标签<br>uni-app的tag同小程序的tag，和HTML的tag不一样，比如div要改成view，span要改成text、a要改成navigator。</p><p>CSS<br>推荐使用flex布局模型<br>单位方面，uni-app 支持的通用 css 单位包括 px、rpx<br>(早期 uni-app 提供了 upx ，目前已经推荐统一改为 rpx 了)</p><p>JS<br>只有H5端可使用浏览器内置对象，比如document、window、localstorage、cookie等，以及jquery等依赖。</p><p>项目文件<br>显示页面必须放到pages目录下，页面所在目录的目录名需要放入相同名称的.vue文件。</p><p>静态资源如图片，固定放到static目录下。这是webpack、mpvue的规则</p><p>echats图表<br>H5端流行的echart报表因为涉及大量dom操作，无法跨端使用，而wx-chart在跨端和更新方面都不足，推荐使用uChart组件。如仍然坚持使用原版echart，可在web-view组件中内嵌html来使用。</p><h4 id="2-页面样式与布局"><a href="#2-页面样式与布局" class="headerlink" title="2.页面样式与布局"></a>2.页面样式与布局</h4><p>（1）尺寸单位</p><p>uni-app支持以下css单位：</p><p>单位    介绍<br>px    屏幕像素<br>upx    uni-app提供根据屏幕宽度自适应的动态单位。以750宽的屏幕为基准，屏幕变宽，upx实际显示效果会等比放大<br>vh    是视窗高度的百分比<br>单位换算    设计稿 1px / 设计稿基准宽度 = 框架样式 1upx / 750upx<br>注意问题： 动态绑定的 style 不支持使用 upx，因为upx是编译器处理的，在手机端动态修改样式赋值时，无法直接使用 upx。</p><p>解决方案： 使用 uni.upx2px(Number) 转换为 px 后再赋值。</p><p>this.cWidth = uni.upx2px(750);</p><p>（2）样式导入</p><style>    @import "../../common/color.css";    .colorA {        box-shadow: none;    }</style><p>（3）内联样式</p><p>支持 style 和 class来控制样式，但建议不要在style中直接使用，影响渲染速度。</p><p>（4）所支持的选择器</p><p>.class</p><p>#id</p><p>element</p><p>::after</p><p>::before</p><p>（5）背景图片 和 字体图标</p><p>支持 base64 格式图片。<br>支持网络路径图片。<br>使用本地图片或字体图标需注意：<br>图片小于 40kb，uni-app 会自动将其转化为 base64 格式；<br>图片大于等于 40kb， 需开发者自己将其转换为base64格式使用，或将其挪到服务器上，从网络地址引用。<br>本地引用路径仅支持以 <del>@ 开头的绝对路径（不支持相对路径）。<br>/* 背景图片 */<br> .bgImg {<br>     background-image: url(‘</del>@/static/logo.png’);<br> }<br>/* 字体图标 */<br> @iconImg {<br>     font-family: test1-icon;<br>     src: url(‘~@/static/iconfont.ttf’);<br> }<br>（6）条件编译</p><p>1、用特殊的代码做标记，不同标记里面的代码可以在不同平台里面执行。</p><p>2、支持的文件</p><p>.vue<br>.js<br>.css<br>pages.json<br>各预编译语言文件，如：.scss、.less、.stylus、.ts、.pug<br>3、语法：以 #ifdef 或 #ifndef 加 %PLATFORM% 开头，以 #endif 结尾。</p><p>#ifdef：if defined 仅在某平台存在<br>#ifndef：if not defined 除了某平台均存在<br>%PLATFORM%：平台名称<br>    <!-- #ifndef APP-PLUS --><br>    <text class="app-text">text</text><br>    <!-- #endif --></p><pre><code>&lt;!-- #ifdef MP-WEIXIN --&gt;&lt;text class=&quot;weixin-text&quot;&gt;text&lt;/text&gt;&lt;!-- #endif --&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> uni-app </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue.js快速入门</title>
      <link href="2020/11/07/vue-js%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>2020/11/07/vue-js%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-js简介"><a href="#Vue-js简介" class="headerlink" title="Vue.js简介"></a>Vue.js简介</h2><p>是当下很火的一个JavaScript MVVM库，它是以数据驱动和组件化的思想构建的。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用Vue.js。</p><p>本文摘自：<a href="http://www.cnblogs.com/keepfool/p/5619070.html">http://www.cnblogs.com/keepfool/p/5619070.html</a></p><p>如果你之前已经习惯了用jQuery操作DOM，学习Vue.js时请先抛开手动操作DOM的思维，因为Vue.js是数据驱动的，你无需手动操作DOM。它通过一些特殊的HTML语法，将DOM和数据绑定起来。一旦你创建了绑定，DOM将和数据保持同步，每当变更了数据，DOM也会相应地更新。</p><p>当然了，在使用Vue.js时，你也可以结合其他库一起使用，比如jQuery。</p><p>本文的Demo和源代码已放到GitHub，如果您觉得本篇内容不错，请点个赞，或在GitHub上加个星星！</p><p><a href="https://keepfool.github.io/vue-tutorials/01.GettingStarted/v-for.html">v-for Demo</a> <a href="https://keepfool.github.io/vue-tutorials/01.GettingStarted/v-bind.html">v-bind Demo</a> <a href="https://keepfool.github.io/vue-tutorials/01.GettingStarted/simple-demo.html">Page Demo</a> <a href="https://github.com/keepfool/vue-tutorials">GitHub Source</a></p><h4 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h4><p>下图不仅概括了MVVM模式（Model-View-ViewModel），还描述了在Vue.js中ViewModel是如何和View以及Model进行交互的。</p><p><strong>ViewModel是Vue.js的核心，它是一个Vue实例。</strong>Vue实例是作用于某一个HTML元素上的，这个元素可以是HTML的body元素，也可以是指定了id的某个元素。</p><p>当创建了ViewModel后，双向绑定是如何达成的呢？</p><p>首先，我们将上图中的DOM Listeners和Data Bindings看作两个工具，它们是实现双向绑定的关键。<br>从View侧看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据；<br>从Model侧看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;!--这是我们的View--&gt;        &lt;div id=&quot;app&quot;&gt;            &#123;&#123; message &#125;&#125;        &lt;/div&gt;    &lt;/body&gt;    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        // 这是我们的Model        var exampleData = &#123;            message: &#39;Hello World!&#39;        &#125;        // 创建一个 Vue 实例或 &quot;ViewModel&quot;        // 它连接 View 与 Model        new Vue(&#123;            el: &#39;#app&#39;,            data: exampleData        &#125;)    &lt;/script&gt;&lt;/html&gt;</code></pre><p>使用Vue的过程就是定义MVVM各个组成部分的过程的过程。</p><ol><li><strong>定义View</strong></li><li><strong>定义Model</strong></li><li><strong>创建一个Vue实例或”ViewModel”，它用于连接View和Model</strong></li></ol><p>在创建Vue实例时，需要传入一个<strong>选项对象</strong>，选项对象可以包含数据、挂载元素、方法、模生命周期钩子等等。</p><p>在这个示例中，<strong>选项对象</strong>的<strong>el属性</strong>指向View，<code>el: &#39;#app&#39;</code>表示该Vue实例将挂载到<code>&lt;div id=&quot;app&quot;&gt;...&lt;/div&gt;</code>这个元素；<strong>data属性</strong>指向Model，<code>data: exampleData</code>表示我们的Model是exampleData对象。<br>Vue.js有多种数据绑定的语法，最基础的形式是文本插值，使用一对大括号语法，在运行时<code>&#123;&#123; message &#125;&#125;</code>会被数据对象的message属性替换，所以页面上会输出”Hello World!”。</p><p>Vue.js已经更新到2.0版本了，但由于还不是正式版，本文的代码都是1.0.25版本的。</p><h4 id="双向绑定示例"><a href="#双向绑定示例" class="headerlink" title="双向绑定示例"></a>双向绑定示例</h4><p>MVVM模式本身是实现了双向绑定的，在Vue.js中可以使用<code>v-model</code>指令在表单元素上创建双向数据绑定。</p><pre><code>&lt;!--这是我们的View--&gt;&lt;div id=&quot;app&quot;&gt;    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;    &lt;input type=&quot;text&quot; v-model=&quot;message&quot;/&gt;&lt;/div&gt;</code></pre><p>将message绑定到文本框，当更改文本框的值时，<code>&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</code> 中的内容也会被更新。</p><p>反过来，如果改变message的值，文本框的值也会被更新，我们可以在Chrome控制台进行尝试。</p><p>Vue实例的data属性指向exampleData，它是一个引用类型，改变了exampleData对象的属性，同时也会影响Vue实例的data属性。</p><h4 id="Vue-js的常用指令"><a href="#Vue-js的常用指令" class="headerlink" title="Vue.js的常用指令"></a>Vue.js的常用指令</h4><p>上面用到的<code>v-model</code>是Vue.js常用的一个指令，那么指令是什么呢？</p><p><strong>Vue.js的指令是以v-开头的，它们作用于HTML元素，指令提供了一些特殊的特性，将指令绑定在元素上时，指令会为绑定的目标元素添加一些特殊的行为，我们可以将指令看作特殊的HTML特性（attribute）。</strong></p><p>Vue.js提供了一些常用的内置指令，接下来我们将介绍以下几个内置指令：</p><ul><li>v-if指令</li><li>v-show指令</li><li>v-else指令</li><li>v-for指令</li><li>v-bind指令</li><li>v-on指令</li></ul><p>Vue.js具有良好的扩展性，我们也可以开发一些自定义的指令，后面的文章会介绍自定义指令。</p><h4 id="v-if指令"><a href="#v-if指令" class="headerlink" title="v-if指令"></a>v-if指令</h4><p><code>v-if</code>是条件渲染指令，它根据表达式的真假来删除和插入元素，它的基本语法如下：</p><pre><code>v-if=&quot;expression&quot;</code></pre><p>expression是一个返回bool值的表达式，表达式可以是一个bool属性，也可以是一个返回bool的运算式。例如：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;h1&gt;Hello, Vue.js!&lt;/h1&gt;            &lt;h1 v-if=&quot;yes&quot;&gt;Yes!&lt;/h1&gt;            &lt;h1 v-if=&quot;no&quot;&gt;No!&lt;/h1&gt;            &lt;h1 v-if=&quot;age &gt;= 25&quot;&gt;Age: &#123;&#123; age &#125;&#125;&lt;/h1&gt;            &lt;h1 v-if=&quot;name.indexOf(&#39;jack&#39;) &gt;= 0&quot;&gt;Name: &#123;&#123; name &#125;&#125;&lt;/h1&gt;        &lt;/div&gt;    &lt;/body&gt;    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;                var vm = new Vue(&#123;            el: &#39;#app&#39;,            data: &#123;                yes: true,                no: false,                age: 28,                name: &#39;keepfool&#39;            &#125;        &#125;)    &lt;/script&gt;&lt;/html&gt;</code></pre><p><strong>注意：</strong>yes, no, age, name这4个变量都来源于Vue实例选项对象的data属性。</p><p>这段代码使用了4个表达式：</p><ul><li>数据的<code>yes</code>属性为true，所以”Yes!”会被输出；</li><li>数据的<code>no</code>属性为false，所以”No!”不会被输出；</li><li>运算式<code>age &gt;= 25</code>返回true，所以”Age: 28”会被输出；</li><li>运算式<code>name.indexOf(&#39;jack&#39;) &gt;= 0</code>返回false，所以”Name: keepfool”不会被输出。</li></ul><p><strong>注意：</strong>v-if指令是根据条件表达式的值来执行<strong>元素的插入或者删除行为。</strong></p><p>这一点可以从渲染的HTML源代码看出来，面上只渲染了3个</p><h1>元素，<code>v-if</code>值为false的<h1>元素没有渲染到HTML。<p></p><p>为了再次验证这一点，可以在Chrome控制台更改age属性，使得表达式<code>age &gt;= 25</code>的值为false，可以看到<code>&lt;h1&gt;Age: 28&lt;/h1&gt;</code>元素被删除了。</p><p>age是定义在选项对象的data属性中的，为什么Vue实例可以直接访问它呢？<br>这是因为<strong>每个Vue实例都会代理其选项对象里的data属性。</strong></p><h4 id="v-show指令"><a href="#v-show指令" class="headerlink" title="v-show指令"></a>v-show指令</h4><p><code>v-show</code>也是条件渲染指令，和v-if指令不同的是，使用<code>v-show</code>指令的元素始终会被渲染到HTML，它只是简单地为元素设置CSS的style属性。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;h1&gt;Hello, Vue.js!&lt;/h1&gt;            &lt;h1 v-show=&quot;yes&quot;&gt;Yes!&lt;/h1&gt;            &lt;h1 v-show=&quot;no&quot;&gt;No!&lt;/h1&gt;            &lt;h1 v-show=&quot;age &gt;= 25&quot;&gt;Age: &#123;&#123; age &#125;&#125;&lt;/h1&gt;            &lt;h1 v-show=&quot;name.indexOf(&#39;jack&#39;) &gt;= 0&quot;&gt;Name: &#123;&#123; name &#125;&#125;&lt;/h1&gt;        &lt;/div&gt;    &lt;/body&gt;    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;                var vm = new Vue(&#123;            el: &#39;#app&#39;,            data: &#123;                yes: true,                no: false,                age: 28,                name: &#39;keepfool&#39;            &#125;        &#125;)    &lt;/script&gt;&lt;/html&gt;</code></pre><p>在Chrome控制台更改age属性，使得表达式<code>age &gt;= 25</code>的值为false，可以看到<code>&lt;h1&gt;Age: 24&lt;/h1&gt;</code>元素被设置了style=”display:none”样式。</p><h4 id="v-else指令"><a href="#v-else指令" class="headerlink" title="v-else指令"></a>v-else指令</h4><p>可以用<code>v-else</code>指令为<code>v-if</code>或<code>v-show</code>添加一个“else块”。<code>v-else</code>元素必须立即跟在<code>v-if</code>或<code>v-show</code>元素的后面——否则它不能被识别。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;h1 v-if=&quot;age &gt;= 25&quot;&gt;Age: &#123;&#123; age &#125;&#125;&lt;/h1&gt;            &lt;h1 v-else&gt;Name: &#123;&#123; name &#125;&#125;&lt;/h1&gt;            &lt;h1&gt;---------------------分割线---------------------&lt;/h1&gt;            &lt;h1 v-show=&quot;name.indexOf(&#39;keep&#39;) &gt;= 0&quot;&gt;Name: &#123;&#123; name &#125;&#125;&lt;/h1&gt;            &lt;h1 v-else&gt;Sex: &#123;&#123; sex &#125;&#125;&lt;/h1&gt;        &lt;/div&gt;    &lt;/body&gt;    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        var vm = new Vue(&#123;            el: &#39;#app&#39;,            data: &#123;                age: 28,                name: &#39;keepfool&#39;,                sex: &#39;Male&#39;            &#125;        &#125;)    &lt;/script&gt;&lt;/html&gt;</code></pre><p><code>v-else</code>元素是否渲染在HTML中，取决于前面使用的是<code>v-if</code>还是<code>v-show</code>指令。<br>这段代码中<code>v-if</code>为true，后面的<code>v-else</code>不会渲染到HTML；<code>v-show</code>为tue，但是后面的<code>v-else</code>仍然渲染到HTML了。</p><h4 id="v-for指令"><a href="#v-for指令" class="headerlink" title="v-for指令"></a>v-for指令</h4><p><code>v-for</code>指令基于一个数组渲染一个列表，它和JavaScript的遍历语法相似：</p><pre><code>v-for=&quot;item in items&quot;</code></pre><p>items是一个数组，item是当前被遍历的数组元素。</p><p>隐藏代码</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; href=&quot;styles/demo.css&quot; /&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;table&gt;                &lt;thead&gt;                    &lt;tr&gt;                        &lt;th&gt;Name&lt;/th&gt;                        &lt;th&gt;Age&lt;/th&gt;                        &lt;th&gt;Sex&lt;/th&gt;                    &lt;/tr&gt;                &lt;/thead&gt;                &lt;tbody&gt;                    &lt;tr v-for=&quot;person in people&quot;&gt;                        &lt;td&gt;&#123;&#123; person.name  &#125;&#125;&lt;/td&gt;                        &lt;td&gt;&#123;&#123; person.age  &#125;&#125;&lt;/td&gt;                        &lt;td&gt;&#123;&#123; person.sex  &#125;&#125;&lt;/td&gt;                    &lt;/tr&gt;                &lt;/tbody&gt;            &lt;/table&gt;        &lt;/div&gt;    &lt;/body&gt;    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        var vm = new Vue(&#123;            el: &#39;#app&#39;,            data: &#123;                people: [&#123;                    name: &#39;Jack&#39;,                    age: 30,                    sex: &#39;Male&#39;                &#125;, &#123;                    name: &#39;Bill&#39;,                    age: 26,                    sex: &#39;Male&#39;                &#125;, &#123;                    name: &#39;Tracy&#39;,                    age: 22,                    sex: &#39;Female&#39;                &#125;, &#123;                    name: &#39;Chris&#39;,                    age: 36,                    sex: &#39;Male&#39;                &#125;]            &#125;        &#125;)    &lt;/script&gt;&lt;/html&gt;</code></pre><p>我们在选项对象的data属性中定义了一个people数组，然后在#app元素内使用<code>v-for</code>遍历people数组，输出每个person对象的姓名、年龄和性别。</p><h4 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令"></a>v-bind指令</h4><pre><code>v-bind`指令可以在其名称后面带一个参数，中间放一个冒号隔开，这个参数通常是HTML元素的特性（attribute），例如：`v-bind:classv-bind:argument=&quot;expression&quot;</code></pre><p>下面这段代码构建了一个简单的分页条，v-bind指令作用于元素的class特性上。<br>这个指令包含一个表达式，表达式的含义是：高亮当前页。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; href=&quot;styles/demo.css&quot; /&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;ul class=&quot;pagination&quot;&gt;                &lt;li v-for=&quot;n in pageCount&quot;&gt;                    &lt;a href=&quot;javascripit:void(0)&quot;                     v-bind:class=&quot;activeNumber === n + 1 ? &#39;active&#39; : &#39;&#39;&quot;&gt;&#123;&#123; n + 1 &#125;&#125;&lt;/a&gt;                &lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;    &lt;/body&gt;    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        var vm = new Vue(&#123;            el: &#39;#app&#39;,            data: &#123;                activeNumber: 1,                pageCount: 10            &#125;        &#125;)    &lt;/script&gt;&lt;/html&gt;</code></pre><p>注意<code>v-for=&quot;n in pageCount&quot;</code>这行代码，pageCount是一个整数，遍历时n从0开始，然后遍历到pageCount –1结束。</p><h4 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h4><p><code>v-on</code>指令用于给监听DOM事件，它的用语法和v-bind是类似的，例如监听<a>元素的点击事件：</a></p><pre><code>&lt;a v-on:click=&quot;doSomething&quot;&gt;</code></pre><p>有两种形式调用方法：**绑定一个方法（让事件指向方法的引用），或者使用内联语句。<br>**Greet按钮将它的单击事件直接绑定到greet()方法，而Hi按钮则是调用say()方法。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;p&gt;&lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;&lt;/p&gt;            &lt;p&gt;                &lt;!--click事件直接绑定一个方法--&gt;                &lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;            &lt;/p&gt;            &lt;p&gt;                &lt;!--click事件使用内联语句--&gt;                &lt;button v-on:click=&quot;say(&#39;Hi&#39;)&quot;&gt;Hi&lt;/button&gt;            &lt;/p&gt;        &lt;/div&gt;    &lt;/body&gt;    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        var vm = new Vue(&#123;            el: &#39;#app&#39;,            data: &#123;                message: &#39;Hello, Vue.js!&#39;            &#125;,            // 在 `methods` 对象中定义方法            methods: &#123;                greet: function() &#123;                    // // 方法内 `this` 指向 vm                    alert(this.message)                &#125;,                say: function(msg) &#123;                    alert(msg)                &#125;            &#125;        &#125;)    &lt;/script&gt;&lt;/html&gt;</code></pre><h4 id="v-bind和v-on的缩写"><a href="#v-bind和v-on的缩写" class="headerlink" title="v-bind和v-on的缩写"></a>v-bind和v-on的缩写</h4><p>Vue.js为最常用的两个指令<code>v-bind</code>和<code>v-on</code>提供了缩写方式。<strong>v-bind指令可以缩写为一个冒号，v-on指令可以缩写为@符号。</strong></p><pre><code>&lt;!--完整语法--&gt;&lt;a href=&quot;javascripit:void(0)&quot; v-bind:class=&quot;activeNumber === n + 1 ? &#39;active&#39; : &#39;&#39;&quot;&gt;&#123;&#123; n + 1 &#125;&#125;&lt;/a&gt;&lt;!--缩写语法--&gt;&lt;a href=&quot;javascripit:void(0)&quot; :class=&quot;activeNumber=== n + 1 ? &#39;active&#39; : &#39;&#39;&quot;&gt;&#123;&#123; n + 1 &#125;&#125;&lt;/a&gt;&lt;!--完整语法--&gt;&lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;&lt;!--缩写语法--&gt;&lt;button @click=&quot;greet&quot;&gt;Greet&lt;/button&gt;</code></pre><h2 id="综合示例"><a href="#综合示例" class="headerlink" title="综合示例"></a>综合示例</h2><p>现在我们已经介绍了一些Vue.js的基础知识了，结合以上知识我们可以来做个小Demo。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; href=&quot;styles/demo.css&quot; /&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;app&quot;&gt;            &lt;fieldset&gt;                &lt;legend&gt;                    Create New Person                &lt;/legend&gt;                &lt;div class=&quot;form-group&quot;&gt;                    &lt;label&gt;Name:&lt;/label&gt;                    &lt;input type=&quot;text&quot; v-model=&quot;newPerson.name&quot;/&gt;                &lt;/div&gt;                &lt;div class=&quot;form-group&quot;&gt;                    &lt;label&gt;Age:&lt;/label&gt;                    &lt;input type=&quot;text&quot; v-model=&quot;newPerson.age&quot;/&gt;                &lt;/div&gt;                &lt;div class=&quot;form-group&quot;&gt;                    &lt;label&gt;Sex:&lt;/label&gt;                    &lt;select v-model=&quot;newPerson.sex&quot;&gt;                    &lt;option value=&quot;Male&quot;&gt;Male&lt;/option&gt;                    &lt;option value=&quot;Female&quot;&gt;Female&lt;/option&gt;                &lt;/select&gt;                &lt;/div&gt;                &lt;div class=&quot;form-group&quot;&gt;                    &lt;label&gt;&lt;/label&gt;                    &lt;button @click=&quot;createPerson&quot;&gt;Create&lt;/button&gt;                &lt;/div&gt;        &lt;/fieldset&gt;        &lt;table&gt;            &lt;thead&gt;                &lt;tr&gt;                    &lt;th&gt;Name&lt;/th&gt;                    &lt;th&gt;Age&lt;/th&gt;                    &lt;th&gt;Sex&lt;/th&gt;                    &lt;th&gt;Delete&lt;/th&gt;                &lt;/tr&gt;            &lt;/thead&gt;            &lt;tbody&gt;                &lt;tr v-for=&quot;person in people&quot;&gt;                    &lt;td&gt;&#123;&#123; person.name &#125;&#125;&lt;/td&gt;                    &lt;td&gt;&#123;&#123; person.age &#125;&#125;&lt;/td&gt;                    &lt;td&gt;&#123;&#123; person.sex &#125;&#125;&lt;/td&gt;                    &lt;td :class=&quot;&#39;text-center&#39;&quot;&gt;&lt;button @click=&quot;deletePerson($index)&quot;&gt;Delete&lt;/button&gt;&lt;/td&gt;                &lt;/tr&gt;            &lt;/tbody&gt;        &lt;/table&gt;        &lt;/div&gt;    &lt;/body&gt;    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        var vm = new Vue(&#123;            el: &#39;#app&#39;,            data: &#123;                newPerson: &#123;                    name: &#39;&#39;,                    age: 0,                    sex: &#39;Male&#39;                &#125;,                people: [&#123;                    name: &#39;Jack&#39;,                    age: 30,                    sex: &#39;Male&#39;                &#125;, &#123;                    name: &#39;Bill&#39;,                    age: 26,                    sex: &#39;Male&#39;                &#125;, &#123;                    name: &#39;Tracy&#39;,                    age: 22,                    sex: &#39;Female&#39;                &#125;, &#123;                    name: &#39;Chris&#39;,                    age: 36,                    sex: &#39;Male&#39;                &#125;]            &#125;,            methods:&#123;                createPerson: function()&#123;                    this.people.push(this.newPerson);                    // 添加完newPerson对象后，重置newPerson对象                    this.newPerson = &#123;name: &#39;&#39;, age: 0, sex: &#39;Male&#39;&#125;                &#125;,                deletePerson: function(index)&#123;                    // 删一个数组元素                    this.people.splice(index,1);                &#125;            &#125;        &#125;)    &lt;/script&gt;&lt;/html&gt;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文简单介绍了Vue.js的MVVM模型和它的双向绑定机制，然后以一个Hello World示例开始了我们的Vue.js之旅，接着我们了解了几个比较常用的指令，最后根据这些知识我们构建了一个简单的示例。</p></h1></h1>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax和axios的区别</title>
      <link href="2020/10/13/ajax%E5%92%8Caxios%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2020/10/13/ajax%E5%92%8Caxios%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="ajax-和-axios-的使用和区别"><a href="#ajax-和-axios-的使用和区别" class="headerlink" title="ajax 和 axios 的使用和区别"></a>ajax 和 axios 的使用和区别</h3><p>​    在开始之前先看一下代码：</p><p>　ajax:</p><p>　　$.ajax({</p><p>　　　　url: ‘接口地址’,</p><p>　　　　type: ‘get’, //或者post　　 请求类型</p><p>　　　　dataType: ‘json’,</p><p>　　　　data: { // 要发送的请求参数</p><p>　　　　　　‘username’ : ‘hermit’,</p><p>　　　　　　‘password’ : ‘a123’</p><p>　　　　},</p><p>　　　　success : function (response) {</p><p>　　　　　　console.log(response); // 请求返回的数据</p><p>　　　　}</p><p>　　})</p><p>　axios:</p><p>　　axios({</p><p>　　　　url: ‘接口地址’,</p><p>　　　　method: ‘get’, //或者 post  请求类型</p><p>　　　　responseType: ‘json’, //默认格式，如果就是 json 格式可以不写</p><p>　　　　data: {</p><p>　　　　　　‘username’ : ‘hermit’,</p><p>　　　　　　‘password’ : ‘a123’</p><p>　　　　}</p><p>　　}).then( function(response){ // 请求正确返回的数据</p><p>　　　　console.log(response);</p><p>　　　　console.log(response.data);</p><p>　　}).catch( function(error) { // 请求错误返回的数据</p><p>　　　　console.log(error);</p><p>　　})</p><p>​    两者其实并没有太大的区别，在写法上大致相同。</p><p>​    其实axios是通过 promise 实现对 ajax 技术的一种封装。就像 ajax 是 通过 jQuery 来封装一样。</p><p>​    也就是说，jQuery 将请求技术进行了封装 变成了 ajax , 而通过 promise 又把 ajax 进行封装就成了 axios。</p><p>　在现在的前端 mvvm 模式下 axios 更适合于数据请求。</p><p>　下面一段是在 vue 中使用的 axios 代码：</p><p>　　btn(value){<br>　　　　let postData = qs.stringify({<br>　　　　　　weixin: value<br>　　　　})<br>　　　　let api = ‘<a href="http://tp.xxxxxxxxx.com/index.php/index/index/checkweixin&#39;">http://tp.xxxxxxxxx.com/index.php/index/index/checkweixin&#39;</a>;<br>　　　　axios.post(api, postData)<br>　　　　.then(function(res) { //请求成功返回的数据<br>　　　　　　console.log(‘==00000’,res.data.code);<br>　　　　　　if(res.data.code == 0){<br>　　　　　　　　$(‘.popup-box’).css({<br>　　　　　　　　　　‘display’:’block’<br>　　　　　　　　})<br>　　　　　　　　$(‘.popup-a1’).css({<br>　　　　　　　　　　‘display’:’block’<br>　　　　　　　　})<br>　　　　　　　　$(‘.numbering&gt;span’).html(that.value);</p><p>　　　　　　}else{<br>　　　　　　　　$(‘.popup-box’).css({<br>　　　　　　　　　　‘display’:’block’<br>　　　　　　　　)<br>　　　　　　　　$(‘.popup-a2’).css({<br>　　　　　　　　　　‘display’:’block’<br>　　　　　　　　})<br>　　　　　　　　$(‘.numbering-a&gt;span’).html(that.value);<br>　　　　　　}<br>　　　　})<br>　　　　.catch(function(err){<br>　　　　　　console.log(‘err==&gt;&gt;’, err); //请求失败返回的数据<br>　　　　})<br>　　}</p>]]></content>
      
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的高级进阶</title>
      <link href="2020/09/10/js%E7%9A%84%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/"/>
      <url>2020/09/10/js%E7%9A%84%E9%AB%98%E7%BA%A7%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="js的执行机制"><a href="#js的执行机制" class="headerlink" title="js的执行机制"></a>js的执行机制</h4><ol><li><p>js是单线程的</p></li><li><p>js的事件循环(Event Loop)是js的执行机制</p><p><img src="https://upload-images.jianshu.io/upload_images/4092152-fa92dd6a20a2d7f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1148/format/webp" alt="img"></p><p>image.png</p></li><li><p>js继承(原型继承,借用构造函数继承,组合继承(原型继承+借用构造函数))</p></li></ol><pre class=" language-jsx"><code class="language-jsx">  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"xiaoju"</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"男"</span>     <span class="token entity" title="&#125;">&amp;#125;</span>     <span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>     <span class="token entity" title="&#125;">&amp;#125;</span>     Student<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 原型继承,无法设置参数</span>     <span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-jsx"><code class="language-jsx"> <span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span>species<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>species <span class="token operator">=</span> species<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>     <span class="token entity" title="&#125;">&amp;#125;</span>   Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token entity" title="&#125;">&amp;#125;</span>     <span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span>species<span class="token punctuation">,</span> color<span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>        Animal<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> species<span class="token punctuation">,</span> color<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 借用构造函数,方法的继承借用构造函数继承不了</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>     <span class="token entity" title="&#125;">&amp;#125;</span>      <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"人类"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>species<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-php"><code class="language-php"> <span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span>species<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; </span>        this<span class="token punctuation">.</span>species <span class="token operator">=</span> species<span class="token punctuation">;</span>        this<span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>   Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>     <span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span>species<span class="token punctuation">,</span> color<span class="token punctuation">,</span> score<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        Animal<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> species<span class="token punctuation">,</span> color<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>         this<span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>     <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span> Cat<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 借用构造函数继承,可以继承原型的方法</span> Cat<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Cat<span class="token punctuation">;</span> Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>exam <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>"考试<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span> let instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"人类"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> let instance  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"猫"</span><span class="token punctuation">,</span><span class="token string">"brone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过Cat.prototype = Animal.prototype的访问可以实现Animal也可以访问Cat原型的方法,唯一不便的就是所有的实例的原型都共享同样的方法</span><span class="token constant">__________</span>修改后<span class="token constant">___________</span>Cat<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这样的话Cat实例就是单独继承父类型的方法,也有自己独立的方法</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/4092152-c900efb6dc51ab13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/996/format/webp" alt="img"></p><ol start="4"><li>函数声明与函数表达式</li></ol><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 函数声明,存在函数声明提升</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token comment" spellcheck="true">// 函数表达式</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错. sum</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span> <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h5 id="call-apply-bind的使用"><a href="#call-apply-bind的使用" class="headerlink" title="call,apply,bind的使用"></a>call,apply,bind的使用</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">var</span> obj <span class="token operator">=</span><span class="token entity" title="&#123;">&amp;#123;</span>  <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span>  length<span class="token punctuation">:</span><span class="token number">4</span><span class="token entity" title="&#125;">&amp;#125;</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将数组的方法用在对象上面</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>splice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>________bind______<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>  name<span class="token punctuation">:</span> <span class="token string">"xiaoju"</span><span class="token punctuation">,</span>  exam<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token entity" title="&#123;">&amp;#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>obj<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// bind可以使this指向调用词法作用域,</span></code></pre><h5 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h5><p>函数作为参数</p><h6 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h6><p>深拷贝与浅拷贝的最大区别在于深拷贝改变拷贝后的值，其原来的值也会改变。当然深拷贝与浅拷贝只针对引用类型这样的复杂类型。<br> // 浅拷贝</p><pre class=" language-jsx"><code class="language-jsx"> <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>            name<span class="token punctuation">:</span> <span class="token string">"xiaoju"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>            hobby<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"photography"</span><span class="token punctuation">,</span> <span class="token string">"cooking"</span><span class="token punctuation">,</span> <span class="token string">"sking"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            dog<span class="token punctuation">:</span> <span class="token entity" title="&#123;">&amp;#123;</span>                name<span class="token punctuation">:</span> <span class="token string">"小A"</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">2</span>            <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token comment" spellcheck="true">// let temp = obj;</span>        <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>                temp<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#125;">&amp;#125;</span>        temp<span class="token punctuation">.</span>hobby<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"xiaoshitou"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 这里对拷贝后对象中数组进行修改</span>        temp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里对拷贝后对象中的一般类型的值进行修改</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//age: 24；// 拷贝后的一般类型的值发生改变</span>        <span class="token comment" spellcheck="true">// dog: &amp;#123;name: "小A", age: 2&amp;#125;</span>        <span class="token comment" spellcheck="true">// hobby: (3) ["xiaoshitou", "cooking", "sking"] // 改变拷贝后对象里面的数组的值</span>        <span class="token comment" spellcheck="true">// name: "xiaoshitou"</span>—————我是华丽的分割线——————        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//age: 23   // 而原来的对象的一般类型的值不会发生改变，所以深拷贝只是针对与引用类型的值</span>        <span class="token comment" spellcheck="true">// dog: &amp;#123;name: "小A", age: 2&amp;#125;</span>        <span class="token comment" spellcheck="true">// hobby: (3) ["xiaoshitou", "cooking", "sking"] // 原来的对象的数组的值也会改变。因为它们指向的是同一块内存地址</span>        <span class="token comment" spellcheck="true">// name: "xiaoju"</span></code></pre><pre class=" language-jsx"><code class="language-jsx">   <span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> objCopy<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>            <span class="token keyword">var</span> copy <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>                <span class="token keyword">let</span> temp <span class="token operator">=</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>                    objCopy<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>                    <span class="token function">deepCopy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> objCopy<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用递归实现引用类型的值进行多层次的拷贝</span>                <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token entity" title="&#123;">&amp;#123;</span>                    objCopy<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token function">deepCopy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> objCopy<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token entity" title="&#125;">&amp;#125;</span> <span class="token keyword">else</span> <span class="token entity" title="&#123;">&amp;#123;</span>                    objCopy<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token entity" title="&#125;">&amp;#125;</span>            <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span>            name<span class="token punctuation">:</span> <span class="token string">"nanlan"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>            hobby<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"photography"</span><span class="token punctuation">,</span> <span class="token string">"skating"</span><span class="token punctuation">,</span> <span class="token string">"drawing"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            eaxm<span class="token punctuation">:</span> <span class="token entity" title="&#123;">&amp;#123;</span>                project<span class="token punctuation">:</span> <span class="token string">"computer"</span><span class="token punctuation">,</span>                time<span class="token punctuation">:</span> <span class="token string">"60"</span>            <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token punctuation">;</span>        <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>        obj1<span class="token punctuation">.</span>hobby<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"playing"</span>        obj1<span class="token punctuation">.</span>eaxm<span class="token punctuation">.</span>project <span class="token operator">=</span> <span class="token string">"science"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拷贝后的对象数组和对象均发生改变，不会影响原来的对象</span>        <span class="token comment" spellcheck="true">// name: "nanlan",</span>        <span class="token comment" spellcheck="true">// age: 23,</span>        <span class="token comment" spellcheck="true">//     hobby: ["photography", "skating", "drawing"],</span>        <span class="token comment" spellcheck="true">//     eaxm: &amp;#123;</span>        <span class="token comment" spellcheck="true">//         project: "computer",</span>        <span class="token comment" spellcheck="true">//         time: "60"</span>        <span class="token comment" spellcheck="true">//     &amp;#125;</span></code></pre><p>为多个相同的元素做批处理的方法</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>44<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>55<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>       function loadTree(parent,callback)<span class="token entity" title="&#123;">&amp;#123;</span>          for(var i = 0; i&lt;parent.children.length;i++)<span class="token entity" title="&#123;">&amp;#123;</span>              var child = parent.children[i];              callback(child);            //   loadTree(child);          <span class="token entity" title="&#125;">&amp;#125;</span>       <span class="token entity" title="&#125;">&amp;#125;</span>      var dom = document.getElementById("list");       loadTree(dom,function(element)<span class="token entity" title="&#123;">&amp;#123;</span>           console.log(element.innerText)       <span class="token entity" title="&#125;">&amp;#125;</span>);</code></pre><h5 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h5><pre class=" language-jsx"><code class="language-jsx"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/ab[a-z]/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里可以写为  new RegExp('ab[a-z]','i'); // i 表示忽略大小写，g匹配全局。</span>    <span class="token keyword">var</span> str  <span class="token operator">=</span> <span class="token string">'abd'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回一个true 或者是false</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'张三：2500,李四：3000，王五：5000'</span><span class="token punctuation">;</span>        <span class="token keyword">var</span>  reg <span class="token operator">=</span> <span class="token regex">/\d+/gi</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> content <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回匹配的结果,只匹配一次</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'张三：2500,李四：3000，王五：5000'</span><span class="token punctuation">;</span>        <span class="token keyword">var</span>  reg <span class="token operator">=</span> <span class="token regex">/\d+/g</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回匹配的结果，可以匹配多次</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5和css3的新特性</title>
      <link href="2020/08/09/html5%E5%92%8Ccss3%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>2020/08/09/html5%E5%92%8Ccss3%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h4 id="H5-新特性"><a href="#H5-新特性" class="headerlink" title="H5 新特性"></a>H5 新特性</h4><ol><li>语义化标签：header、footer、section、nav、aside、article</li><li>增强型表单：input 的多个 type</li><li>新增表单元素：datalist、keygen、output</li><li>新增表单属性：placehoder、required、min 和 max</li><li>音频视频：audio、video</li><li>canvas</li><li>地理定位</li><li>拖拽</li><li>本地存储：localStorage - 没有时间限制的数据存储；sessionStorage - 针对一个 session 的数据存储，当用户关闭浏览器窗口后，数据会被删除</li><li>新事件：onresize、ondrag、onscroll、onmousewheel、onerror、onplay、onpause</li><li>WebSocket：单个 TCP 连接上进行全双工通讯的协议</li></ol><h4 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h4><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>header</td><td>定义了文档的头部区域</td></tr><tr><td>footer</td><td>定义了文档的尾部区域</td></tr><tr><td>nav</td><td>定义文档的导航</td></tr><tr><td>section</td><td>定义文档中的节（section、区段）</td></tr><tr><td>article</td><td>定义页面独立的内容区域</td></tr><tr><td>aside</td><td>定义页面的侧边栏内容</td></tr><tr><td>detailes</td><td>用于描述文档或文档某个部分的细节</td></tr><tr><td>summary</td><td>标签包含 details 元素的标题</td></tr><tr><td>dialog</td><td>定义对话框，比如提示框</td></tr></tbody></table><h4 id="增强型表单"><a href="#增强型表单" class="headerlink" title="增强型表单"></a>增强型表单</h4><p>HTML5 拥有多个新的表单 Input 输入类型。这些新特性提供了更好的输入控制和验证</p><table><thead><tr><th>input 的 type</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>主要用于选取颜色</td></tr><tr><td>date</td><td>从一个日期选择器选择一个日期</td></tr><tr><td>datetime</td><td>选择一个日期（UTC 时间）</td></tr><tr><td>email</td><td>包含 e-mail 地址的输入域</td></tr><tr><td>month</td><td>选择一个月份</td></tr><tr><td>number</td><td>数值的输入域</td></tr><tr><td>range</td><td>一定范围内数字值的输入域</td></tr><tr><td>search</td><td>用于搜索域</td></tr><tr><td>tel</td><td>定义输入电话号码字段</td></tr><tr><td>time</td><td>选择一个时间</td></tr><tr><td>url</td><td>URL 地址的输入域</td></tr><tr><td>week</td><td>选择周和年</td></tr></tbody></table><h4 id="html5-也新增以下表单元素"><a href="#html5-也新增以下表单元素" class="headerlink" title="html5 也新增以下表单元素"></a>html5 也新增以下表单元素</h4><table><thead><tr><th>表单元素</th><th>描述</th></tr></thead><tbody><tr><td>datalist</td><td>元素规定输入域的选项列表，使用 input 元素的 list 属性与 datalist 元素的 id 绑定</td></tr><tr><td>keygen</td><td>提供一种验证用户的可靠方法，标签规定用于表单的密钥对生成器字段</td></tr><tr><td>output</td><td>用于不同类型的输出，比如计算或脚本输出</td></tr></tbody></table><h4 id="html5-新增的表单属性"><a href="#html5-新增的表单属性" class="headerlink" title="html5 新增的表单属性"></a>html5 新增的表单属性</h4><table><thead><tr><th>表单属性</th><th>描述</th></tr></thead><tbody><tr><td>placehoder</td><td>简短的提示在用户输入值前会显示在输入域上。即我们常见的输入框默认提示，在用户输入后消失</td></tr><tr><td>required</td><td>是一个 boolean 属性。要求填写的输入域不能为空</td></tr><tr><td>pattern</td><td>描述了一个正则表达式用于验证 input 元素的值</td></tr><tr><td>min 和 max</td><td>设置元素最小值与最大值</td></tr><tr><td>step</td><td>为输入域规定合法的数字间隔</td></tr><tr><td>height 和 width</td><td>用于 image 类型的 input 标签的图像高度和宽度</td></tr><tr><td>autofocus</td><td>是一个 boolean 属性。规定在页面加载时，域自动地获得焦点</td></tr><tr><td>multiple</td><td>是一个 boolean 属性。规定 input 元素中可选择多个值</td></tr></tbody></table><h4 id="html5-新事件"><a href="#html5-新事件" class="headerlink" title="html5 新事件"></a>html5 新事件</h4><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>onresize</td><td>当调整窗口大小时运行脚本</td></tr><tr><td>ondrag</td><td>当拖动元素时运行脚本</td></tr><tr><td>onscroll</td><td>当滚动元素滚动元素的滚动条时运行脚本</td></tr><tr><td>onmousewheel</td><td>当转动鼠标滚轮时运行脚本</td></tr><tr><td>onerror</td><td>当错误发生时运行脚本</td></tr><tr><td>onplay</td><td>当媒介数据将要开始播放时运行脚本</td></tr><tr><td>onpause</td><td>当媒介数据暂停时运行脚本</td></tr></tbody></table><ul><li>块级元素<br>div、p、h1~h6、ul、ol、dl、li、dd、table、hr、blockquote、address、table、menu、pre，HTML5 新增的 header、section、aside、footer 等</li><li>行内元素<br>pan、img、a、lable、input、abbr（缩写）、em（强调）、big、cite（引用）、i（斜体）、q（短引用）、textarea、select、small、sub、sup，strong、u（下划线）、button</li></ul><h4 id="CSS3-新特性"><a href="#CSS3-新特性" class="headerlink" title="CSS3 新特性"></a>CSS3 新特性</h4><ol><li>选择器</li><li>背景和边框</li><li>文本效果</li><li>2D/3D 转换</li><li>动画、过渡</li><li>多列布局</li><li>用户界面</li></ol><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code>:last-child /* 选择元素最后一个孩子 */:first-child /* 选择元素第一个孩子 */:nth-child(1) /* 按照第几个孩子给它设置样式 */:nth-child(even) /* 按照偶数 */:nth-child(odd)  /* 按照奇数 */:disabled /* 选择每个禁用的E元素 */:checked /* 选择每个被选中的E元素 */:not(selector) /* 选择非 selector 元素的每个元素 */::selection /* 选择被用户选取的元素部分 */</code></pre><p>伪类和伪元素：</p><blockquote><p>根本区别在于它们是否创造了新的元素（抽象）</p></blockquote><ul><li>伪类：用于向某些选择器添加特殊的效果（没有创建新元素）</li></ul><pre><code>:last-child /* 选择元素最后一个孩子 */:first-child /* 选择元素第一个孩子 */:nth-child(1) /* 按照第几个孩子给它设置样式 */a:link &#123;color: #FF0000&#125; /* 未访问的链接 */a:visited &#123;color: #00FF00&#125; /* 已访问的链接 */a:hover &#123;color: #FF00FF&#125; /* 鼠标移动到链接上 */a:active &#123;color: #0000FF&#125; /* 选定的链接 */</code></pre><ul><li>伪元素：创建了 html 中不存在的元素，用于将特殊的效果添加到某些选择器</li></ul><pre><code>::before &#123;&#125; /* 选择器在被选元素的前面插入内容和定义css，使用 content 属性来指定要插入的内容。 */::after &#123;&#125; /* 选择器在被选元素的后面插入内容和定义css，使用 content 属性来指定要插入的内容。 */:first-letter /* 选择该元素内容的首字母 */:first-line /* 选择该元素内容的首行 */::selection /* 选择被用户选取的元素部分 */</code></pre><h4 id="背景和边框"><a href="#背景和边框" class="headerlink" title="背景和边框"></a>背景和边框</h4><ul><li><p>背景：<br>background-size：规定背景图片的尺寸（cover：填充；100% 100%：拉伸）<br>background-origin：规定背景图片的定位区域<br>对于 background-origin 属性，有如下属性<br>背景图片可以放置于 content-box、padding-box 或 border-box 区域</p></li><li><p>边框：<br>border-radius：圆角<br>box-shadow / text-shadow：阴影<br>border-image：边框图片</p></li></ul><h4 id="文本效果"><a href="#文本效果" class="headerlink" title="文本效果"></a>文本效果</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>text-shadow</td><td>向文本添加阴影</td></tr><tr><td>text-justify</td><td>规定当 text-align 设置为 “justify” 时所使用的对齐方法</td></tr><tr><td>text-emphasis</td><td>向元素的文本应用重点标记以及重点标记的前景色</td></tr><tr><td>text-outline</td><td>规定文本的轮廓</td></tr><tr><td>text-overflow</td><td>规定当文本溢出包含元素时发生的事情</td></tr><tr><td>text-wrap</td><td>规定文本的换行规则</td></tr><tr><td>word-break</td><td>规定非中日韩文本的换行规则</td></tr><tr><td>word-wrap</td><td>允许对长的不可分割的单词进行分割并换行到下一行</td></tr><tr><td>text-decoration</td><td>文本修饰符：overline、line-through、underline 分别是上划线、中划线、下划线</td></tr></tbody></table><ul><li>@font-face 自定义字体</li><li>渐变，CSS3新增了渐变效果，包括 linear-gradient(线性渐变)和 radial-gradient(径向渐变)</li></ul><h4 id="2D-3D-转换"><a href="#2D-3D-转换" class="headerlink" title="2D/3D 转换"></a>2D/3D 转换</h4><ul><li>2D 转换（transform）</li></ul><ol><li>translate()：元素从其当前位置移动，根据给定的 left（x 坐标） 和 top（y 坐标） 位置参数。 transform: translate(50px, 100px);</li><li>rotate()：元素顺时针旋转给定的角度。若为负值，元素将逆时针旋转。transform: rotate(30deg);</li><li>scale()：元素的尺寸会增加或减少，根据给定的宽度（X 轴）和高度（Y 轴）参数，也可以一个值（宽高）。transform: scale(2,4);</li><li>skew()：元素翻转给定的角度，根据给定的水平线（X 轴）和垂直线（Y 轴）参数。transform: skew(30deg, 20deg);</li><li>matrix()： 把所有 2D 转换方法组合在一起，需要六个参数，包含数学函数，允许您：旋转、缩放、移动以及倾斜元素。transform:matrix(0.866,0.5,-0.5,0.866,0,0);</li></ol><ul><li>3D 转换</li></ul><ol><li>rotateX()：元素围绕其 X 轴以给定的度数进行旋转。transform: rotateX(120deg);</li><li>rotateY()：元素围绕其 Y 轴以给定的度数进行旋转。transform: rotateY(130deg);</li><li>perspective：规定 3D 元素的透视效果</li></ol><h4 id="动画、过渡"><a href="#动画、过渡" class="headerlink" title="动画、过渡"></a>动画、过渡</h4><ul><li>过渡效果（transition），使页面变化更平滑，以下参数可直接写在 transition 后面</li></ul><ol><li>transition-property ：执行动画对应的属性，例如 color，background 等，可以使用 all 来指定所有的属性。</li><li>transition-duration：过渡动画的一个持续时间。</li><li>transition-timing-function：在延续时间段，动画变化的速率，常见的有：ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier</li><li>transition-delay：延迟多久后开始动画</li></ol><ul><li>动画（animation）<br>先定义 @keyframes 规则（0%，100% | from，to）<br>然后定义 animation，以下参数可直接写在 animation 后面</li></ul><ol><li>animation-name: 定义动画名称</li><li>animation-duration: 指定元素播放动画所持续的时间长</li><li>animation-timing-function: ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(, , , )： 指元素根据时间的推进来改变属性值的变换速率，即动画的播放方式</li><li>animation-delay: 指定元素动画开始时间</li><li>animation-iteration-count: infinite | number：指定元素播放动画的循环次数</li><li>animation-direction: normal | alternate： 指定元素动画播放的方向，其只有两个值，默认值为normal，如果设置为 normal 时，动画的每次循环都是向前播放；另一个值是 alternate，规定动画在下一周期逆向地播放（来去播放）</li><li>animation-play-state: running | paused ：控制元素动画的播放状态</li></ol><h4 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h4><p>通过CSS3，能够创建多个列来对文本进行布局</p><ol><li>column-count: 规定元素应该被分隔的列数</li><li>column-gap: 规定列之间的间隔</li><li>column-rule: 设置列之间的宽度、样式和颜色规则</li></ol><h4 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h4><p>CSS3中，新的用户界面特性包括重设元素尺寸、盒尺寸以及轮廓等</p><ol><li>resize</li><li>box-sizing</li><li>outline-offset</li></ol><p>resize 属性规定是否可由用户调整元素尺寸。如果希望此属性生效，需要设置元素的 overflow 属性，值可以是 auto、hidden 或 scroll</p><pre><code>div &#123;  resize: both; /* none|both|horizontal|vertical; */  overflow: auto;&#125;</code></pre><p>box-sizing 属性可设置的值有 content-box、border-box 和 inherit<br>content-box 是W3C的标准盒模型，元素宽度 = 内容宽度 + padding + border：意思是 padding 和 border 会增加元素的宽度，以至于实际上的 width 大于原始设定的 width<br>border-box 是ie的怪异盒模型，元素宽度 = 设定的宽度，已经将 padding 和 border 包括进去了，比如有时候在元素基础上添加内距 padding 或 border 会将布局撑破，但是使用 border-box 就可以轻松完成<br>inherit：规定应从父元素继承 box-sizing 属性的值</p><p>outline-offset 属性对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓</p><h4 id="CSS-兼容内核"><a href="#CSS-兼容内核" class="headerlink" title="CSS 兼容内核"></a>CSS 兼容内核</h4><p>-moz-：代表FireFox浏览器私有属性<br>-ms-：代表IE浏览器私有属性<br>-webkit-：代表safari、chrome浏览器私有属性<br>-o-：代表opera浏览器私有属性</p>]]></content>
      
      
      
        <tags>
            
            <tag> html5 </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于matery进一步美化</title>
      <link href="2020/07/03/%E5%85%B3%E4%BA%8Ematery%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%BE%8E%E5%8C%96/"/>
      <url>2020/07/03/%E5%85%B3%E4%BA%8Ematery%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="1-动态标题"><a href="#1-动态标题" class="headerlink" title="1. 动态标题"></a>1. 动态标题</h4><p>打开博客主题文件夹，路径：<code>themes/matery/layout/layout.ejs</code>，在对应位置添加如下代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span>        st<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"写离开页面标题显示的内容"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span>            <span class="token string">"写进入页面标题显示的内容"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>        </code></pre><h4 id="2-修改导航栏颜色以及透明效果"><a href="#2-修改导航栏颜色以及透明效果" class="headerlink" title="2. 修改导航栏颜色以及透明效果"></a>2. 修改导航栏颜色以及透明效果</h4><p>打开<code>themes/matery/source/css/matery.css</code>文件，大约在250行，有一个<code>.bg-color</code>属性，修改其属性值即可，代码如下：</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>bg-color &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //修改成自己喜欢的颜色值    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span>  //透明效果 值范围 <span class="token number">0</span>~<span class="token number">1</span>，看情况自己修改&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="3-添加动态诗词（未尝试）"><a href="#3-添加动态诗词（未尝试）" class="headerlink" title="3. 添加动态诗词（未尝试）"></a>3. 添加动态诗词（未尝试）</h4><p>采用的是<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cuamlucmlzaGljaS5jb20v">今日诗词</a>，每次返回一句诗词，根据时间、地点、天气、事件智能推荐。官网有<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cuamlucmlzaGljaS5jb20vZG9jLw==">API文档</a>，可以去看一下，有多种安装方式，最简单的方式就是从官网获取代码，在<code>/themes/matery/layout/_partial/head.ejs</code>添加下面的一行代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://sdk.jinrishici.com/v2/browser/jinrishici.js"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>然后再将<code>/themes/matery/layout/_partial/bg-cover-content.ejs</code>中的<code>&lt;%= config.description %&gt;</code>修改为把<code>&lt;%= config.description %&gt;</code>改为<code>&lt;%- &#39;正在加载今日诗词....&#39; %&gt;</code>，这个使用前提是将主题配置文件的<code>subtitle</code>的值改为<code>false</code>。</p><h4 id="4-鼠标点击文字特效（未使用）"><a href="#4-鼠标点击文字特效（未使用）" class="headerlink" title="4. 鼠标点击文字特效（未使用）"></a>4. 鼠标点击文字特效（未使用）</h4><p>实现方法，引入js文件，在主题文件下的<code>/source/js/</code>下新建<code>click_show_text.js</code>，其代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"富强"</span><span class="token punctuation">,</span> <span class="token string">"民主"</span><span class="token punctuation">,</span> <span class="token string">"文明"</span><span class="token punctuation">,</span> <span class="token string">"和谐"</span><span class="token punctuation">,</span> <span class="token string">"自由"</span><span class="token punctuation">,</span> <span class="token string">"平等"</span><span class="token punctuation">,</span> <span class="token string">"公正"</span><span class="token punctuation">,</span> <span class="token string">"法治"</span><span class="token punctuation">,</span> <span class="token string">"爱国"</span><span class="token punctuation">,</span> <span class="token string">"敬业"</span><span class="token punctuation">,</span> <span class="token string">"诚信"</span><span class="token punctuation">,</span> <span class="token string">"友善"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> $i <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span/>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>a_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a_idx <span class="token operator">=</span> <span class="token punctuation">(</span>a_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>            y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>        $i<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token string">"z-index"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token string">"left"</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>            <span class="token string">"position"</span><span class="token punctuation">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>            <span class="token string">"font-weight"</span><span class="token punctuation">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>            <span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"#FF0000"</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span><span class="token punctuation">;</span>        $i<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">,</span>                <span class="token string">"opacity"</span><span class="token punctuation">:</span> <span class="token number">0</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token number">3000</span><span class="token punctuation">,</span>            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                $i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">'delay()'</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".buryit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="5-关于我页面添加个人简历"><a href="#5-关于我页面添加个人简历" class="headerlink" title="5. 关于我页面添加个人简历"></a>5. 关于我页面添加个人简历</h4><p>打开<code>theme/matery/layout/about.ejs</code>文件，大约在13行。有一个``标签，找出其对应结尾的标签，大约在61行左右，然后在新增如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-content article-card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-address-book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">__('个人简历')</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>articleContent<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">page.content</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>注意粘贴的位置和空格要正确，这里的位置随你自己设置，你也可以把简历作为第一个card，然后<code>/source/about/index.md</code>下面写上你的简历了（就像写博客一样）。</p><h4 id="6-豆瓣书单电影页面"><a href="#6-豆瓣书单电影页面" class="headerlink" title="6. 豆瓣书单电影页面"></a>6. 豆瓣书单电影页面</h4><p>首先在博客站点目录执行下面的命令安装豆瓣插件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-douban --save    </code></pre><p>紧接着在博客站点目录的配置文件<code>_config.yml</code>下，添加如下配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">douban</span><span class="token punctuation">:</span>   <span class="token key atrule">user</span><span class="token punctuation">:</span> <span class="token number">252345665    </span><span class="token comment" spellcheck="true">#这个需要修改为你个人的id  </span>  <span class="token key atrule">builtin</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true">#如果想生成豆瓣页面，这个需要设置为true</span>  <span class="token key atrule">book</span><span class="token punctuation">:</span>       <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'This is my book title'</span>       <span class="token key atrule">quote</span><span class="token punctuation">:</span> <span class="token string">'This is my book quote'</span>   <span class="token key atrule">movie</span><span class="token punctuation">:</span>       <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'This is my movie title'</span>       <span class="token key atrule">quote</span><span class="token punctuation">:</span> <span class="token string">'This is my movie quote'</span>   <span class="token key atrule">game</span><span class="token punctuation">:</span>       <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'This is my game title'</span>       <span class="token key atrule">quote</span><span class="token punctuation">:</span> <span class="token string">'This is my game quote'</span>   <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span></code></pre><ul><li><strong>user</strong>:：你的豆瓣ID。打开豆瓣，登入账户，然后在右上角点击 ”个人主页“，这时候地址栏的URL大概是这样：<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cuZG91YmFuLmNvbS9wZW9wbGUveHh4eHh4Lw==">https://www.douban.com/people/xxxxxx/</a> ，其中的”xxxxxx”就是你的个人ID了。</li><li><strong>builtin</strong>：是否将生成页面的功能嵌入 <code>hexo s</code> 和 <code>hexo g</code> 中，默认是 <code>false</code> ，另一可选项为 <code>true</code> 。</li><li><strong>title</strong>： 该页面的标题。</li><li><strong>quote</strong>： 写在页面开头的一段话,支持html语法。</li><li><strong>timeout</strong>： 爬取数据的超时时间，默认是 10000ms，如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul><p>如果只想显示某一个页面(比如movie)，那就把其他的配置项注释掉即可</p><p>然后再主题配置文件<code>_config.yml</code>中添加关于此页面的菜单：(下面是我的配置)</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>    <span class="token key atrule">媒体</span><span class="token punctuation">:</span>       <span class="token key atrule">url</span><span class="token punctuation">:</span> /       <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list       <span class="token key atrule">children</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 电影           <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies           <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film         <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 书单           <span class="token key atrule">url</span><span class="token punctuation">:</span> /books           <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book         <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 游戏           <span class="token key atrule">url</span><span class="token punctuation">:</span> /games           <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>gamepad</code></pre><p>适配Matery主题：在 <code>/themes/hexo-theme-matery/layout</code> 文件夹下面创建一个名为 <code>douban.ejs</code> 的文件，并将下面的内容复制进去：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/post-cover'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span>style<span class="token operator">></span>     <span class="token punctuation">.</span>hexo<span class="token operator">-</span>douban<span class="token operator">-</span>picture img <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"contact"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container chip-container"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>             <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content"</span> style<span class="token operator">=</span><span class="token string">"padding: 30px"</span><span class="token operator">></span>                 <span class="token operator">&lt;</span>h1 style<span class="token operator">=</span><span class="token string">"margin: 10px 0 10px 0px;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> page<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>                 <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> page<span class="token punctuation">.</span>content <span class="token operator">%</span><span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>         <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>             <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content"</span> style<span class="token operator">=</span><span class="token string">"text-align: center"</span><span class="token operator">></span>                 <span class="token operator">&lt;</span>h3 style<span class="token operator">=</span><span class="token string">"margin: 5px 0 5px 5px;"</span><span class="token operator">></span>如果你有好的内容推荐，欢迎在下面留言！<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>         <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>gitalk <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>gitalk<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/gitalk'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>gitment<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>                 <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/gitment'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>disqus<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>                 <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/disqus'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>livere <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>livere<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>                 <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/livere'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>valine <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>valine<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>                 <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/valine'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span></code></pre><p>然后在博客站点目录下的<code>node_modules</code>文件夹下找到<code>hexo-douban/lib</code>，文件夹下有三个js文件，分别为：<code>books-generator.js</code> 、<code>games-generator.js</code> 、<code>movies-generator.js</code>，用文本编辑器打开这三个文件，并将其文件内容末尾的代码修改为一下内容：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 原文件内容为 layout: [`page`, `post`] ，将其修改为下面的内容*/</span>layout<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token string">`page`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`douban`</span></span><span class="token punctuation">]</span></code></pre><p>最后就是使用并生成相应的页面，执行命令如下:</p><pre class=" language-bash"><code class="language-bash">hexo douban     </code></pre><p><strong>需要注意的是</strong>，通常大家都喜欢用 <code>hexo d</code> 来作为 <code>hexo deploy</code> 命令的简化，但是当安装了 <code>hexo douban</code> 之后，就不能用 <code>hexo d</code> 了，因为 <code>hexo douban</code> 跟 <code>hexo deploy</code> 的前缀都是 <code>hexo d</code> ，你以后执行的 <code>hexo d</code> 将不再是 Hexo 页面的生成，而是豆瓣页面的生成。</p><p>以下是可选的命令参数：</p><pre class=" language-bash"><code class="language-bash">-h, --help    <span class="token comment" spellcheck="true"># 帮助页面</span>-b, --books   <span class="token comment" spellcheck="true"># 只生成书单页面</span>-g, --games   <span class="token comment" spellcheck="true"># 只生成游戏页面</span>-m, --movies  <span class="token comment" spellcheck="true"># 只生成电影页面</span></code></pre><p><strong>当站点配置文件的builtin的值为true时，生成页面的功能会嵌入到<code>hexo g</code>和<code>hexo s</code>中，在进行部署生成操作，会自动生成相应的页面</strong>。</p><h4 id="7-外链跳转插件"><a href="#7-外链跳转插件" class="headerlink" title="7. 外链跳转插件"></a>7. 外链跳转插件</h4><p><a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9ibG9nLmh2bm9idWcuY29tL2dvLmh0bWw/dXJsPWFIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyaDJibTlpZFdjdmFHVjRieTFsZUhSbGNtNWhiQzFzYVc1cg==">hexo-external-link</a>是一个跳转外链相关插件。自动为所有html文件中外链的a标签生成对应的属性。 比如 设置<code>target=’_blank’, rel=’external nofollow noopener noreferrer’</code> 告诉搜索引擎这是外部链接,不要将该链接计入权重。 同时自动生成外链跳转页面,默认在根目录下 go.html;</p><p>使用 npm 或者 yarn 安装</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## npm 安装</span><span class="token function">npm</span> <span class="token function">install</span> hexo-external-link --save<span class="token comment" spellcheck="true">## yarn 安装</span>yarn add hexo-external-link</code></pre><p>之后再hexo博客站点根目录下添加如下配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">hexo_external_link</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">enable_base64_encode</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">url_param_name</span><span class="token punctuation">:</span> <span class="token string">'u'</span>  <span class="token key atrule">html_file_name</span><span class="token punctuation">:</span> <span class="token string">'go.html'</span>  <span class="token key atrule">target_blank</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">link_rel</span><span class="token punctuation">:</span> <span class="token string">'external nofollow noopener noreferrer'</span>  <span class="token key atrule">domain</span><span class="token punctuation">:</span> <span class="token string">'your_domain'</span> <span class="token comment" spellcheck="true"># 如果开启了防盗链，填写你的域名</span>  <span class="token key atrule">safety_chain</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><ul><li><strong>enable</strong> - 是否开启<code>hexo_external_link</code>插件 - 默认 false</li><li><strong>enable_base64_encode</strong> - 是否对跳转<code>url</code>使用<code>base64编码</code> - 默认 fasle</li><li><strong>url_param_name</strong> - url参数名,在跳转到外链传递给<code>html_file_name</code>的参数名 - 默认 ‘u’</li><li><strong>html_file_name</strong> - 跳转到外链的页面文件路径 - 默认 ‘go.html’</li><li><strong>target_blank</strong> - 是否为外链的<code>a</code>标签添加<code>target=&#39;_blank&#39;</code> - 默认 true</li><li><strong>link_rel</strong> - 设置外链的<code>a</code>标签的rel属性 - 默认 ‘external nofollow noopener noreferrer’</li><li><strong>domain</strong> - 如果开启了防盗链,除了 localhost 和 domain(你的域名) 之外调用会跳到主页,同时也是判断链接是否为外链的依据 - 默认 window.location.host</li><li><strong>safety_chain</strong> - go.html 为了防止外链盗用 对域名进行的判断 - 默认 false</li></ul><h4 id="8-添加动态科技线条背景（未尝试）"><a href="#8-添加动态科技线条背景（未尝试）" class="headerlink" title="8. 添加动态科技线条背景（未尝试）"></a>8. 添加动态科技线条背景（未尝试）</h4><p>在<code>themes/matery/layout/layout.ejs</code>文件中添加如下代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>动态线条背景<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span>color<span class="token operator">=</span><span class="token string">"122 103 238"</span> opacity<span class="token operator">=</span><span class="token string">'0.7'</span> zIndex<span class="token operator">=</span><span class="token string">"-2"</span> count<span class="token operator">=</span><span class="token string">"200"</span> src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>其中：</p><ul><li>color：表示线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0）</li><li>opacity：表示线条透明度（0~1），默认：0.5</li><li>count：表示线条的总数量，默认：150</li><li>zIndex：表示背景的z-index属性，css属性用于控制所在层的位置，默认：-1</li></ul><h4 id="9-添加鼠标点击烟花爆炸效果"><a href="#9-添加鼠标点击烟花爆炸效果" class="headerlink" title="9. 添加鼠标点击烟花爆炸效果"></a>9. 添加鼠标点击烟花爆炸效果</h4><p>首先在<code>themes/matery/source/js</code>目录下新建<code>fireworks.js</code>文件，打开这个网址<a href="https://cdn.jsdelivr.net/gh/baifeng66/cdn@1.1/source/js/fireworks.js">传送门</a>，将内容复制粘贴到<code>fireworks.js</code>即可。</p><p>然后再<code>themes/matery/layout/layout.ejs</code>文件内添加下面的内容：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>canvas <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fireworks"</span> style<span class="token operator">=</span><span class="token string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/fireworks.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>然后<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>即可，就可以看到效果了。</p><h4 id="10-添加樱花飘落效果"><a href="#10-添加樱花飘落效果" class="headerlink" title="10. 添加樱花飘落效果"></a>10. 添加樱花飘落效果</h4><p>在<code>themes/matery/source/js</code>目录下新建<code>sakura.js</code>文件，打开这个网址<a href="https://cdn.jsdelivr.net/gh/baifeng66/cdn@1.1/source/js/sakura.js">传送门</a>，将内容复制粘贴到sakura.js即可。</p><p>然后再<code>themes/matery/layout/layout.ejs</code>文件内添加下面的内容：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment" spellcheck="true">//只在桌面版网页启用特效</span><span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;script type="text/javascript" src="/js/sakura.js">&lt;\/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="11-添加鼠标彩虹星星掉落跟随效果"><a href="#11-添加鼠标彩虹星星掉落跟随效果" class="headerlink" title="11. 添加鼠标彩虹星星掉落跟随效果"></a>11. 添加鼠标彩虹星星掉落跟随效果</h4><p>在<code>themes/matery/source/js</code>目录下新建<code>cursor.js</code>文件，打开这个网址<a href="https://cdn.jsdelivr.net/gh/baifeng66/cdn@1.1/source/js/cursor.js">传送门</a>，将内容复制粘贴到cursor.js即可。</p><p>然后再<code>themes/matery/layout/layout.ejs</code>文件内添加下面的内容：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/cursor.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="12-添加雪花飘落效果（采用）"><a href="#12-添加雪花飘落效果（采用）" class="headerlink" title="12. 添加雪花飘落效果（采用）"></a>12. 添加雪花飘落效果（采用）</h4><p>在<code>themes/matery/source/js</code>目录下新建<code>snow.js</code>文件，打开这个网址<a href="https://cdn.jsdelivr.net/gh/baifeng66/cdn@1.1/source/js/snow.js">传送门</a>，将内容复制粘贴到cursor.js即可。</p><p>然后再<code>themes/matery/layout/layout.ejs</code>文件内添加下面的内容：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/snow.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="13-文章生成永久链接"><a href="#13-文章生成永久链接" class="headerlink" title="13. 文章生成永久链接"></a>13. 文章生成永久链接</h4><p>主题默认的文章链接配置是</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month/<span class="token punctuation">:</span>day/<span class="token punctuation">:</span>title</code></pre><p>这种生成的链接地址很长，文章版权的链接地址会出现一大串字符编码，一点也不好看。因此需要修改文章生成链接的格式。</p><p>首先再根目录下执行下面的命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save</code></pre><p>然后再站点配置文件下添加如下配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>    <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc16   <span class="token comment" spellcheck="true">#算法： crc16(default) and crc32</span>    <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex     <span class="token comment" spellcheck="true">#进制： dec(default) and hex: dec #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</span></code></pre><p>再将站点配置文件的<code>permalink</code>的值修改为：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>abbrlink.html  <span class="token comment" spellcheck="true"># 此处可以自己设置，也可以直接使用 :/abbrlink</span></code></pre><p>生成完后，原md文件的Front-matter 内会增加<code>abbrlink</code> 字段，值为生成的ID 。这个字段确保了在我们修改了<code>Front-matter</code> 内的博客标题title或创建日期date字段之后而不会改变链接地址。</p><h2 id="第二章-博客优化"><a href="#第二章-博客优化" class="headerlink" title="第二章 博客优化"></a>第二章 博客优化</h2><h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><p>使用图片懒加载需要安装插件：<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9naXRodWIuY29tL1Ryb3ktWWFuZy9oZXhvLWxhenlsb2FkLWltYWdl">hexo-lazyload-image</a></p><p>在站点根目录执行下面的命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image --save</code></pre><p>之后在站点配置文件下添加下面的代码：</p><pre class=" language-yml"><code class="language-yml">lazyload:  enable: true  # 是否开启图片懒加载  onlypost: false  # 是否只对文章的图片做懒加载  loadingImg: # eg ./images/loading.gif</code></pre><p>最后执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>就可以看到效果了。</p><h4 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h4><h5 id="方法一：gulp代码压缩"><a href="#方法一：gulp代码压缩" class="headerlink" title="方法一：gulp代码压缩"></a>方法一：gulp代码压缩</h5><p><strong>使用方法：</strong></p><ol><li><p>进入站点根目录下依次执行下面的命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 全局安装gulp模块</span><span class="token function">npm</span> <span class="token function">install</span> gulp -g<span class="token comment" spellcheck="true"># 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行</span><span class="token function">npm</span> <span class="token function">install</span> gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save<span class="token comment" spellcheck="true"># 额外的功能模块</span><span class="token function">npm</span> <span class="token function">install</span> gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</code></pre><p>b. 在Hexo根目录新建文件 <code>gulpfile.js</code>，并复制以下内容到文件中，有中文注释，可以根据自己需求修改。（注意：文件名不能错，一定为<code>gulpfile.js</code>，否则会出错！）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> debug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cleancss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-clean-css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//css压缩组件</span><span class="token keyword">var</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-uglify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//js压缩组件</span><span class="token keyword">var</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlmin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html压缩组件</span><span class="token keyword">var</span> htmlclean <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlclean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html清理组件</span><span class="token keyword">var</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-imagemin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//图片压缩组件</span><span class="token keyword">var</span> changed <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-changed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件更改校验组件</span><span class="token keyword">var</span> gulpif <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-if"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//任务 帮助调用组件</span><span class="token keyword">var</span> plumber <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-plumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//容错组件（发生错误不跳出任务，并报出错误内容）</span><span class="token keyword">var</span> isScriptAll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span><span class="token keyword">var</span> isDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否调试显示 编译通过的文件</span><span class="token keyword">var</span> gulpBabel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-babel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> es2015Preset <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-preset-es2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Hexo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"hexo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> hexo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hexo</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化一个hexo对象</span><span class="token comment" spellcheck="true">// 清除public文件夹</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"clean"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"public/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span><span class="token comment" spellcheck="true">// 创建静态页面 （等同 hexo generate）</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hexo            <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                watch<span class="token punctuation">:</span> <span class="token boolean">false</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动Hexo服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> hexo        <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 部署到服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hexo            <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                watch<span class="token punctuation">:</span> <span class="token boolean">false</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩public目录下的js文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressJs"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.js"</span><span class="token punctuation">,</span> <span class="token string">"!./public/libs/**"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>排除的js        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> title<span class="token punctuation">:</span> <span class="token string">"Compress JS:"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>            <span class="token function">gulpBabel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>es2015Preset<span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">/</span> es5检查机制            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span><span class="token function">调用压缩组件方法uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>对合并的文件进行压缩        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>输出到目标目录<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span> 压缩<span class="token keyword">public</span>目录下的css文件gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressCss"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        rebase<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token operator">/</span><span class="token operator">/</span>advanced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>类型：Boolean 默认：<span class="token boolean">true</span> <span class="token punctuation">[</span>是否开启高级优化（合并选择器等）<span class="token punctuation">]</span>        compatibility<span class="token punctuation">:</span> <span class="token string">"ie7"</span> <span class="token operator">/</span><span class="token operator">/</span>保留ie7及以下兼容写法 类型：String 默认：<span class="token string">''</span>or<span class="token string">'*'</span> <span class="token punctuation">[</span>启用兼容模式； <span class="token string">'ie7'</span>：IE7兼容模式，<span class="token string">'ie8'</span>：IE8兼容模式，<span class="token string">'*'</span>：IE9<span class="token operator">+</span>兼容模式<span class="token punctuation">]</span>        <span class="token operator">/</span><span class="token operator">/</span>keepBreaks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>类型：Boolean 默认：<span class="token boolean">false</span> <span class="token punctuation">[</span>是否保留换行<span class="token punctuation">]</span>        <span class="token operator">/</span><span class="token operator">/</span>keepSpecialComments<span class="token punctuation">:</span> <span class="token string">'*'</span> <span class="token operator">/</span><span class="token operator">/</span>保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.css"</span><span class="token punctuation">,</span> <span class="token string">"!./public/**/*.min.css"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//排除的css</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> title<span class="token punctuation">:</span> <span class="token string">"Compress CSS:"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cleancss</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩public目录下的html文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressHtml"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cleanOptions <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        protect<span class="token punctuation">:</span> <span class="token regex">/&lt;\!--%fooTemplate\b.*?%-->/g</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//忽略处理</span>        unprotect<span class="token punctuation">:</span> <span class="token operator">/</span><span class="token operator">&lt;</span>script <span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">*</span>\btype<span class="token operator">=</span><span class="token string">"text\/x-handlebars-template"</span><span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">?</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">/</span>gi <span class="token comment" spellcheck="true">//特殊处理</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> minOption <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩HTML</span>        collapseBooleanAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//省略布尔属性的值 &lt;input checked="true"/> ==> &lt;input /></span>        removeEmptyAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除所有空格作属性值 &lt;input id="" /> ==> &lt;input /></span>        removeScriptTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除&lt;script>的type="text/javascript"</span>        removeStyleLinkTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除&lt;style>和&lt;link>的type="text/css"</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//清除HTML注释</span>        minifyJS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩页面JS</span>        minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩页面CSS</span>        minifyURLs<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//替换页面URL</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"./public/**/*.html"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> title<span class="token punctuation">:</span> <span class="token string">"Compress HTML:"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlclean</span><span class="token punctuation">(</span>cleanOptions<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlmin</span><span class="token punctuation">(</span>minOption<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩 public/medias 目录内图片</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressImage"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        optimizationLevel<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Number 默认：3 取值范围：0-7（优化等级）</span>        progressive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 无损压缩jpg图片</span>        interlaced<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span>        multipass<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 多次优化svg直到完全优化</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"./public/medias/**/*.*"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public/medias"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> title<span class="token punctuation">:</span> <span class="token string">"Compress Images:"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">imagemin</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行顺序： 清除public目录 -> 产生原始博客内容 -> 执行压缩混淆 -> 部署到服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>    <span class="token string">"build"</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>        <span class="token string">"clean"</span><span class="token punctuation">,</span>        <span class="token string">"generate"</span><span class="token punctuation">,</span>        <span class="token string">"compressHtml"</span><span class="token punctuation">,</span>        <span class="token string">"compressCss"</span><span class="token punctuation">,</span>        <span class="token string">"compressJs"</span><span class="token punctuation">,</span>        <span class="token string">"compressImage"</span><span class="token punctuation">,</span>        gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认任务</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>    <span class="token string">"default"</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>        <span class="token string">"clean"</span><span class="token punctuation">,</span>        <span class="token string">"generate"</span><span class="token punctuation">,</span>        gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">"compressHtml"</span><span class="token punctuation">,</span> <span class="token string">"compressCss"</span><span class="token punctuation">,</span> <span class="token string">"compressJs"</span><span class="token punctuation">,</span><span class="token string">"compressImage"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span></code></pre><p>c. 以后的执行方式有两种：</p><ul><li>直接在Hexo根目录执行 <code>gulp</code>或者 <code>gulp default</code> ，这个命令相当于 <code>hexo cl&amp;&amp;hexo g</code> 并且再把代码和图片压缩。</li><li>在Hexo根目录执行 <code>gulp build</code> ，这个命令与第1种相比是：在最后又加了个 <code>hexo d</code> ，等于说生成、压缩文件后又帮你自动部署了。</li></ul><p>值得注意的是：这个加入了图片压缩，如果不想用图片压缩可以把第154行的 <code>&quot;compressImage&quot;,</code> 和第165行的 <code>,&quot;compressImage&quot;</code> 去掉即可</p></li></ol><h4 id="方法二：hexo-neat插件实现代码压缩"><a href="#方法二：hexo-neat插件实现代码压缩" class="headerlink" title="方法二：hexo-neat插件实现代码压缩"></a>方法二：hexo-neat插件实现代码压缩</h4><p><a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9naXRodWIuY29tL3JvemJvL2hleG8tbmVhdA==">hexo-neat</a>插件也是用来压缩代码的，底层也是通过gulp来实现的。</p><p>但是这个插件是有Bug的：</p><ul><li>压缩 md 文件会使 markdown 语法的代码块消失</li><li>会删除全角空格</li></ul><p>在博客站点根目录执行安装代码：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-neat --save</code></pre><p>紧接着在站点根目录下的配置文件添加如下代码：</p><pre class=" language-yml"><code class="language-yml">neat_enable: trueneat_html:  enable: true  exclude:neat_css:  enable: true  exclude:    - '*.min.css'neat_js:  enable: true  mangle: true  output:  compress:  exclude:    - '*.min.js'</code></pre><p>然后直接 <code>hexo cl&amp;&amp;hexo g</code> 就可以了，会自动压缩文件 。</p><p><strong>补充</strong>：为了解决以上Bug，<strong>对于matery主题</strong>（其他主题自行解决）需要将以上默认配置修改为：</p><pre class=" language-yml"><code class="language-yml">#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）neat_enable: trueneat_html:  enable: true  exclude:    - '**/*.md'neat_css:  enable: true  exclude:    - '**/*.min.css'neat_js:  enable: true  mangle: true  output:  compress:  exclude:    - '**/*.min.js'    - '**/**/instantpage.js'    - '**/matery.js'</code></pre><h4 id="打造稳定快速、高效免费图床"><a href="#打造稳定快速、高效免费图床" class="headerlink" title="打造稳定快速、高效免费图床"></a>打造稳定快速、高效免费图床</h4><blockquote><p>请看我的另一篇博客文章:<a href="https://white_maple.gitee.io/posts/eb3a.html">https://white_maple.gitee.io/posts/eb3a.html</a></p></blockquote><h4 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h4><blockquote><p>推荐一位大佬的博客文章：<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly95YWZpbmUtYmxvZy5jbi9wb3N0cy9lZTM1Lmh0bWw=">https://yafine-blog.cn/posts/ee35.html</a></p></blockquote><h4 id="第三章-部署到Coding和码云"><a href="#第三章-部署到Coding和码云" class="headerlink" title="第三章 部署到Coding和码云"></a>第三章 部署到Coding和码云</h4><blockquote><p>推荐一位大佬的文章：<a href="https://yafine-blog.cn/go.html?url=aHR0cHM6Ly95YWZpbmUtYmxvZy5jbi9wb3N0cy81MWZiLmh0bWw=">https://yafine-blog.cn/posts/51fb.html</a></p></blockquote><h4 id="第四章-新建文章自动打开本地Markdown编辑器"><a href="#第四章-新建文章自动打开本地Markdown编辑器" class="headerlink" title="第四章 新建文章自动打开本地Markdown编辑器"></a>第四章 新建文章自动打开本地Markdown编辑器</h4><p>写新文章时，需要控制台执行<code>hexo new &quot;文章名字&quot;</code>，这样就会在<code>_posts</code>下生成一篇新文章，但需要手动打开，挺麻烦，只需要在站点根目录下新建<code>scripts</code>目录，然后在新建<code>auto_open.js</code>，在文件填入一下内容：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exec<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Hexo 2.x 用户复制这段</span><span class="token comment" spellcheck="true">//hexo.on('new', function(path)&amp;#123;</span>  <span class="token comment" spellcheck="true">//spawn('start  "markdown编辑器绝对路径.exe" ' + path);</span><span class="token comment" spellcheck="true">//&amp;#125;);</span><span class="token comment" spellcheck="true">// Hexo 3 用户复制这段</span>hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'new'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'start  "D:\Program Files\Typorae\Typora.exe" '</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中<code>&quot;D:\Program Files\Typorae\Typora.exe&quot;</code>是我本地编辑器的路径，只需要改为你本地编辑器的路径即可，然后在执行<code>hexo cl &amp;&amp; hexo g -d</code>，部署到GitHub即可，以后在发布文章就会自动打开编辑器。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你搭建个人博客</title>
      <link href="2020/06/20/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/06/20/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-必要的准备"><a href="#第一章-必要的准备" class="headerlink" title="第一章 必要的准备"></a>第一章 必要的准备</h3><h5 id="Node-js的安装"><a href="#Node-js的安装" class="headerlink" title="Node.js的安装"></a>Node.js的安装</h5><p> node.js去官网下载，傻瓜式安装一直点下一步就好了。</p><h5 id="git的安装和环境变量的配置"><a href="#git的安装和环境变量的配置" class="headerlink" title="git的安装和环境变量的配置"></a>git的安装和环境变量的配置</h5><p>推荐使用git来作为命令输入工具，如果嫌麻烦的话，使用windows自带的cmd也是可以的。</p><h4 id="那么我们开始进行博客的创建吧"><a href="#那么我们开始进行博客的创建吧" class="headerlink" title="那么我们开始进行博客的创建吧"></a>那么我们开始进行博客的创建吧</h4><h5 id="借助nmp安装cnpm"><a href="#借助nmp安装cnpm" class="headerlink" title="借助nmp安装cnpm"></a>借助nmp安装cnpm</h5><p>由于npm下载速度很慢所以我们可以安装淘宝镜像cnpm</p><p>在命令行窗口输入 npm install -g cnpm –registry==<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><h5 id="hexo博客的安装"><a href="#hexo博客的安装" class="headerlink" title="hexo博客的安装"></a>hexo博客的安装</h5><p>在命令行窗口输入 cnpm install -g hexo-cli</p><p>可以使用hexo -v 验证是否安装成功</p><h5 id="新建blog文件夹，并初始化hexo"><a href="#新建blog文件夹，并初始化hexo" class="headerlink" title="新建blog文件夹，并初始化hexo"></a>新建blog文件夹，并初始化hexo</h5><p>新建一个blog cd进入到文件夹，初始化博客 hexo init，输入ls -l来查看文件，通过hexo start来启动博客，也可以使用hexo s （简写）</p><h5 id="新建一篇博客文章，并进行相应的修改"><a href="#新建一篇博客文章，并进行相应的修改" class="headerlink" title="新建一篇博客文章，并进行相应的修改"></a>新建一篇博客文章，并进行相应的修改</h5><p>输入 hexo n  “我的第一篇博客文章” 输入 ls -l 进行查看，进入文章并进行修改，vim 我的第一篇博客文章.md 使用markdown语法进行对文章的修改，保存退出 esc :wq </p><h5 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h5><p>先进行清理 hexo clean 然后 hexo g 来生成文章 最后在进行启动 hexo s 就可以在本地访问了</p><h4 id="将博客部署到远端"><a href="#将博客部署到远端" class="headerlink" title="将博客部署到远端"></a>将博客部署到远端</h4><h5 id="借助github来进行部署"><a href="#借助github来进行部署" class="headerlink" title="借助github来进行部署"></a>借助github来进行部署</h5><p>新建一个仓库，名称一定要符合格式 你的github名称+github.io例如：wuhongwei123.github 然后安装一个git部署的插件 cnpm install  –save hexo-deployer-git  配置 _config.yml文件 cd进入文件在最后deploy的位置 添加 </p><p>type: “git” </p><p>repo: 将你创建的github仓库地址复制到这里</p><p>branch：master</p><p>然后esc :wq 退出</p><p>然后我们就可以通过wuhongwei123.git.io进行访问</p><h4 id="选择一个我们喜欢的主题"><a href="#选择一个我们喜欢的主题" class="headerlink" title="选择一个我们喜欢的主题"></a>选择一个我们喜欢的主题</h4><p>我举一个例子 git clone <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia </p><p>克隆结束后vim _config.yml 修改主题 在theme 中 换成yilia</p><p>重新 hexo clean ，hexo  g ，hexo s ，hexo d 然后就更改成功了。</p><h2 id="第二章-matery主题及相关配置"><a href="#第二章-matery主题及相关配置" class="headerlink" title="第二章  matery主题及相关配置"></a>第二章  matery主题及相关配置</h2><h4 id="主题下载与安装"><a href="#主题下载与安装" class="headerlink" title="主题下载与安装"></a>主题下载与安装</h4><p>点击 <a href="https://links.jianshu.com/go?to=https://github.com/blinkfox/hexo-theme-matery">传送门</a>下载 <code>master</code> 分支的最新版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><h6 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h6><blockquote><p><strong>注意：</strong>首先需要明白什么是站点配置文件，什么是主题配置文件，站点配置文件就是根目录下的配置文件，比如我的博客文件在<code>F:\blog</code>下，那么站点配置文件就是<code>F:\blog\_config.yml</code>，主题配置文件就是<code>F:\blog\themes\matery\_config.yml</code>。另外注意，配置文件中的标点符号不要出现中文格式的标点符号，不然运行会出错。</p></blockquote><p>主题下载完成后，将站点配置文件中的<code>theme</code>值修改为你们自己下载主题的文件名，我的文件名为<code>hexo-theme-matery-develop</code>，那么值就修改为<code>theme: hexo-theme-matery-develop</code>。</p><p>一些站点配置文件的其他地方的修改：</p><ul><li>语言选择：如果为中文用户，则在<code>language:</code>后添加值<code>zh-CN</code>，如果不修改，默认为英语；</li><li>网址修改：<code>url:</code>的值为你的网址名，如<code>http://xxxx.github.io</code>，如果有域名，则修改为你的域名即可，至于有关域名的修改解析，后面我会说到，这里先不说了。</li><li>站点配置文件有个<code>per_page属性</code>，建议修改为6的倍数，这样网站在适应设备时，有较好的显示效果</li></ul><h6 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h6><h6 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h6><p>  菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)</p><p>  图标icon 可以在<a href="https://links.jianshu.com/go?to=https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9mb250YXdlc29tZS5jb20vaWNvbnM=">Font Awesome</a> 中查找</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book</code></pre><p>当然啦，这些图标呢一开始都是默认的，你可以不用修改</p><p>  如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><p>  在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)</p><p>  在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.</p><p>  注意每个二级菜单模块前要加 <code>-</code>.</p><p>  注意缩进格式</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Musics        <span class="token key atrule">url</span><span class="token punctuation">:</span> /musics        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image</code></pre><h4 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h4><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://links.jianshu.com/go?to=https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9ucG0udGFvYmFvLm9yZy9wYWNrYWdlL2hleG8tZmlsdGVyLWdpdGh1Yi1lbW9qaXM=">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  <span class="token key atrule">customEmojis</span><span class="token punctuation">:</span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://links.jianshu.com/go?to=https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9naXRodWIuY29tL2VsZTgyOC9oZXhvLXByaXNtLXBsdWdpbg==">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span></code></pre><p>这里注意了！  当你添加代码块时一定要在```后面加上语言的名字不然此功能会无效！看下图：</p><p> <code>yml</code>就是语言名字。</p><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>本主题中还使用到了 <a href="https://links.jianshu.com/go?to=https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9naXRodWIuY29tL3d6cGFuL2hleG8tZ2VuZXJhdG9yLXNlYXJjaA==">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h4 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h4><p>本主题中还使用到了 <a href="https://links.jianshu.com/go?to=https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWdlbmVyYXRvci1mZWVk">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h4 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="https://links.jianshu.com/go?to=https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy5kYW92b2ljZS5pby8=">DaoVoice</a> 在线聊天功能（可选的）</h4><p>前往 <a href="https://links.jianshu.com/go?to=https://yafine-blog.cn/go.html?url=aHR0cDovL3d3dy5kYW92b2ljZS5pby8=">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中</p><h4 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://links.jianshu.com/go?to=https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cudGlkaW8uY29tLw==">Tidio</a> 在线聊天功能（可选的）</h4><p>前往 <a href="https://links.jianshu.com/go?to=https://yafine-blog.cn/go.html?url=aHR0cHM6Ly93d3cudGlkaW8uY29tLw==">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h4 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h4><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h4 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h4><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.socialLink.github)</span> <span class="token attr-name">&amp;#123;</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.socialLink.github %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">&amp;#125;</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://links.jianshu.com/go?to=https://yafine-blog.cn/go.html?url=aHR0cHM6Ly9mb250YXdlc29tZS5jb20vaWNvbnM=">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h4 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h4><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h4 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h4><blockquote><p>新版主题支持接入第三方音乐，如QQ音乐，网易云音乐，酷狗音乐等等</p></blockquote><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class=" language-yml"><code class="language-yml"># 是否在首页显示音乐music:  enable: true  title:             #非吸底模式有效    enable: true    show: 听听音乐  server: netease   #require music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 503838841     #require song id / playlist id / album id / search keyword  fixed: false      # 开启吸底模式  autoplay: false   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠</code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，<code>playlist</code>的<code>id</code>即为这串数字。</p></blockquote><h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><h4 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h4><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="https://links.jianshu.com/go?to=https://yafine-blog.cn/go.html?url=aHR0cDovL3Rvb2wub3NjaGluYS5uZXQvZW5jcnlwdD90eXBlPTI=">开源中国在线工具</a>、<a href="https://links.jianshu.com/go?to=https://yafine-blog.cn/go.html?url=aHR0cDovL2VuY29kZS5jaGFodW8uY29tLw==">chahuo</a>、<a href="https://links.jianshu.com/go?to=https://yafine-blog.cn/go.html?url=aHR0cDovL3Rvb2wuY2hpbmF6LmNvbS90b29scy9oYXNoLmFzcHg=">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol><p>以下为文章的 <code>Front-matter</code> 示例。</p><h5 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h5><pre class=" language-yml"><code class="language-yml">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---</code></pre><h5 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h5><pre class=" language-yml"><code class="language-yml">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><h4 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h4><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="https://links.jianshu.com/go?to=https://yafine-blog.cn/go.html?url=aHR0cDovL2J1c3VhbnppLmlicnVjZS5pbmZvLw==">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h4 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h4><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token number">.</span>bg-color &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow &amp;#123<span class="token punctuation">;</span></span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow &amp;#123<span class="token punctuation">;</span></span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><h4 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h4><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 `` 代码中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><p>如果想改为每小时或者每分钟切换banner图的话，需要将<code>getDay()</code>改为<code>getHours()</code>或者<code>getMinutes()</code>即可</p><ol><li>社交链接的修改</li></ol><p>默认的配置信息为：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 首页 banner 中的第二行个人信息配置，留空即不启用</span><span class="token key atrule">socialLink</span><span class="token punctuation">:</span>  <span class="token key atrule">github</span><span class="token punctuation">:</span>  https<span class="token punctuation">:</span>//github.com/blinkfox  <span class="token key atrule">email</span><span class="token punctuation">:</span> 1181062873@qq.com  <span class="token key atrule">facebook</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://www.facebook.com/xxx</span>  <span class="token key atrule">twitter</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://twitter.com/xxx</span>  <span class="token key atrule">qq</span><span class="token punctuation">:</span> <span class="token number">1181062873</span>  <span class="token key atrule">weibo</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://weibo.com/xxx</span>  <span class="token key atrule">zhihu</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://www.zhihu.com/xxx</span>  <span class="token key atrule">rss</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># true、false</span></code></pre><p>如果想添加简书，CSDN，掘金，博客园等等，需要在主题配置文件添加相关配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">socialLink</span><span class="token punctuation">:</span>  <span class="token key atrule">qq</span><span class="token punctuation">:</span> <span class="token number">1035800145</span>  <span class="token key atrule">weixin</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Yafine/Yafine<span class="token punctuation">-</span>imgs/images/wechat.png  <span class="token key atrule">github</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/Yafine  <span class="token key atrule">email</span><span class="token punctuation">:</span> mailto<span class="token punctuation">:</span>1035800145@qq.com  <span class="token key atrule">facebook</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://www.facebook.com/xxx</span>  <span class="token key atrule">twitter</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://twitter.com/xxx</span>  <span class="token key atrule">weibo</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://weibo.com/xxx</span>  <span class="token key atrule">zhihu</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.zhihu.com/people/xuan<span class="token punctuation">-</span>tian<span class="token punctuation">-</span>40<span class="token punctuation">-</span>64/activities  <span class="token key atrule">juejin</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//juejin.im/user/5a902053f265da4e7527ae71/activities  <span class="token key atrule">csdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.csdn.net/victoryxa  <span class="token key atrule">jianshu</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.jianshu.com/u/3b3856869772  <span class="token key atrule">cnblogs</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.cnblogs.com/yafine/  <span class="token key atrule">rss</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># true、false</span></code></pre><p>其中的<code>weixin</code>我是用的图片链接，会跳转到一个新的标签页，之后还需要修改<code>ejs</code>文件，文件在主题目录下的<code>layout</code>文件夹下的<code>_partial</code>文件夹，修改<code>social-link.ejs</code>，添加相关的配置，我个人添加的配置如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>jianshu<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.jianshu %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"关注我的简书: &lt;%= theme.socialLink.jianshu %>"</span> data<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"top"</span> data<span class="token operator">-</span>delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fab fa-jianshu"</span><span class="token operator">></span>简<span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>csdn<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.csdn %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"关注我的CSDN: &lt;%= theme.socialLink.csdn %>"</span> data<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"top"</span> data<span class="token operator">-</span>delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fab fa-csdn"</span><span class="token operator">></span>C<span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>juejin<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.juejin %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"关注我的掘金: &lt;%= theme.socialLink.juejin %>"</span> data<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"top"</span> data<span class="token operator">-</span>delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fab fa-juejin"</span><span class="token operator">></span>掘<span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>cnblogs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.cnblogs %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"关注我的博客园: &lt;%= theme.socialLink.cnblogs %>"</span> data<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"top"</span> data<span class="token operator">-</span>delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fab fa-juejin"</span><span class="token operator">></span>博<span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>weixin<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.weixin %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"微信联系我: &lt;%= theme.socialLink.weixin %>"</span> data<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"top"</span> data<span class="token operator">-</span>delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fab fa-weixin"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>到这里此次教程就完了，下一篇呢，我会把一些美化主题的方法告诉你们，还有一些优化访问博客速度…等等之类的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Markdown语法的使用</title>
      <link href="2020/06/03/%E5%85%B3%E4%BA%8EMarkdown%E8%AF%AD%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/06/03/%E5%85%B3%E4%BA%8EMarkdown%E8%AF%AD%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="Typora-入门"><a href="#Typora-入门" class="headerlink" title="Typora 入门"></a>Typora 入门</h3><p>写Markdown费事？Typora让你像写Word一样行云流水，所见即所得。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Typora是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。即时渲染使得你写Markdown就想是写Word文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。</p><ul><li>Typora删除了预览窗口，以及所有其他不必要的干扰。取而代之的是实时预览。</li><li>Markdown的语法因不同的解析器或编辑器而异，Typora使用的是<a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/">GitHub Flavored Markdown</a>。</li></ul><h3 id="Markdown介绍"><a href="#Markdown介绍" class="headerlink" title="Markdown介绍"></a>Markdown介绍</h3><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 <code>.md</code>, <code>.markdown</code>。</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul><li>加粗： <code>Ctrl + B</code></li><li>标题： <code>Ctrl + H</code></li><li>插入链接： <code>Ctrl + K</code></li><li>插入代码： <code>Ctrl + Shift + C</code> – 无法执行</li><li>行内代码： <code>Ctrl + Shift + K</code></li><li>插入图片： <code>Ctrl + Shift + I</code></li><li>无序列表：<code>Ctrl + Shift + L</code> – 无法执行</li><li>撤销： <code>Ctrl + Z</code></li><li>一级标题： <code>Ctrl + 1</code> – 以此类推</li></ul><pre class=" language-go"><code class="language-go">Typora快捷键整合<span class="token string">``</span><span class="token string">`Ctrl+1  一阶标题    Ctrl+B  字体加粗Ctrl+2  二阶标题    Ctrl+I  字体倾斜Ctrl+3  三阶标题    Ctrl+U  下划线Ctrl+4  四阶标题    Ctrl+Home   返回Typora顶部Ctrl+5  五阶标题    Ctrl+End    返回Typora底部Ctrl+6  六阶标题    Ctrl+T  创建表格Ctrl+L  选中某句话   Ctrl+K  创建超链接Ctrl+D  选中某个单词  Ctrl+F  搜索Ctrl+E  选中相同格式的文字   Ctrl+H  搜索并替换Alt+Shift+5 删除线 Ctrl+Shift+I    插入图片Ctrl+Shift+M    公式块 Ctrl+Shift+Q    引用注：一些实体符号需要在实体符号之前加”\”才能够显示`</span><span class="token string">``</span></code></pre><h3 id="引用文字"><a href="#引用文字" class="headerlink" title="引用文字"></a>引用文字</h3><p>&gt; + 空格 + 引用文字</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>使用 * + - 都可以创建一个无序列表</p><ul><li>AAA</li><li>BBB</li><li>CCC</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>使用 1. 2. 3. 创建有序列表</p><ol><li>AAA</li><li>BBB</li><li>CCC</li></ol><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><p>\ -[ ] 不勾选<br>\ -[x] 勾选</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>在Typora中插入程序代码的方式有两种：使用反引号 `（~ 键）、使用缩进（Tab）。</p><ul><li>插入行内代码，即插入一个单词或者一句代码的情况，使用 <code>code</code> 这样的形式插入。</li><li>插入多行代码输入3个反引号（`） + 回车，并在后面选择一个语言名称即可实现语法高亮。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello, world!"</span><span class="token punctuation">)</span></code></pre><h3 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。根据需要加载 Mathjax 对数学公式进行渲染。</p><p>按下 <code>$$</code>，然后按下回车键，即可进行数学公式的编辑。</p><pre><code>$$\mathbf&#123;V&#125;_1\times\mathbf&#123;V&#125;_2 = \mathbf&#123;X&#125;_3$$</code></pre><h3 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h3><p>输入 <code>| 表头1 | 表头2 |</code>并回车。即可创建一个包含2列表。快捷键 <code>Ctrl + T</code>弹出对话框。</p><table><thead><tr><th>id</th><th>number</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr></tbody></table><ul><li>不管是哪种方式，第一行为表头，第二行为分割表头和主体部分，第三行开始每一行为一个表格行</li><li>列与列之间用管道符号<code>|</code> 隔开</li><li>还可设置对齐方式(表头与内容之间)，如果不使用对齐标记，内容默认左对齐，表头居中对齐<ul><li>左对齐 ：|</li><li>右对齐 |：</li><li>中对齐 ：|：</li></ul></li><li>为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 | 来标记单元格边界</li><li>为了使 Markdown 更清晰，| 和 - 两侧需要至少有一个空格（最左侧和最右侧的 | 外就不需要了）。</li></ul><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>这个例子的脚注为[<a href="https://www.cnblogs.com/hider/p/11614688.html#fn1">1]</a>。</p><p>注意：该例子脚注标识是1，脚注标识可以为字母数字下划线，但是暂不支持中文。脚注内容可为任意字符，包括中文。</p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>输入 <code>***</code> 或者 <code>---</code> 再按回车即可绘制一条水平线，如下：</p><hr><h4 id="目录（TOC）"><a href="#目录（TOC）" class="headerlink" title="目录（TOC）"></a>目录（TOC）</h4><p>输入 <code>[ toc ]</code> 然后回车，即可创建一个“目录”。TOC从文档中提取所有标题，其内容将自动更新。</p><h4 id="跨度元素"><a href="#跨度元素" class="headerlink" title="跨度元素"></a>跨度元素</h4><p>跨度元素即图片，网址，视频等，在Typora中输入后，会立即载入并呈现。</p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h4 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h4><p>这是一个带有标题属性的 <code>[链接](http://example.com/ &quot;标题&quot;)</code><br>这是一个没有标题属性的 <code>[链接](http://example.net/)</code></p><p><a href="http://example.com/">链接</a></p><p><a href="http://example.net/">链接</a></p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>这是一个[参考链接]id – 无法执行</p><h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><p>Typora允许用&lt;括号括起来&gt;, 把URL作为链接插入。</p><p>Typora还会自动链接标准网址。</p><p><a href="http://www.baidu.com/">www.baidu.com</a></p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><pre><code>![显示的文字](C:\Users\Hider\Desktop\echart.png &quot;图片标题&quot;)![显示的文字](C:\Users\Hider\Desktop\echart.png)</code></pre><p>除了以上2种方式之外，还可以直接将图片拖拽进来，自动生成链接。</p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>使用 <code>*单个星号*</code> 或者 <code>_单下划线_</code> 可以字体倾斜。快捷键 <code>Ctrl + I</code></p><p><em>斜体</em></p><h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4><p>使用 <code>**两个星号**</code> 或者 <code>__两个下划线__</code> 可以字体加粗。快捷键 <code>Ctrl + B</code></p><p><strong>加粗</strong></p><h4 id="加粗斜体"><a href="#加粗斜体" class="headerlink" title="加粗斜体"></a>加粗斜体</h4><p>使用<code>***加粗斜体***</code>可以加粗斜体。</p><p><em><strong>加粗斜体</strong></em></p><h4 id="代码标记"><a href="#代码标记" class="headerlink" title="代码标记"></a>代码标记</h4><p>标记代码使用反引号，即在英文输入法下，ESC键下面和1键左边的符号。</p><blockquote><p>使用该 <code>printf()</code>功能</p></blockquote><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>使用<code>~~删除线~~</code> 快捷键 <code>Alt + Shift + 5</code></p><p>删除线</p><h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><p>\下划线 – 无法执行</p><p>参考另一篇文章，可执行。</p><p>通过<code>&lt;u&gt;下划线的内容&lt;/u&gt;</code> 或者 快捷键<code>Ctrl + U</code>可实现下划线</p><p>下划线的内容</p><h4 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h4><p>Github的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。</p><p>:smile – 无法显示</p><p>😺</p><h4 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h4><p>可以使用 <code>&lt;sub&gt;文本&lt;/sub&gt;</code>实现下标。</p><p>(需在设置中打开该功能)</p><p>H2O</p><p>H2O</p><h4 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h4><p>可以使用<code>&lt;sup&gt;文本&lt;/sup&gt;</code>实现上标。</p><p>(需在设置中打开该功能)</p><p>X2</p><p>X2</p><h4 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h4><p><code>==高亮==</code>(需在设置中打开该功能)</p><p>我是最重要的</p><h4 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h4><p>使用 <code>&lt;center&gt;这是要居中的内容&lt;/center&gt;</code>可以使文本居中</p><p>这是要居中的文本内容</p><h4 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h4><p>使用 <code>空格 + 空格 + Enter</code>可以实现换行，例如：</p><p>或者可以使用<code>&lt;br/&gt;</code>实现换行。</p><h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><h4 id="文本加粗"><a href="#文本加粗" class="headerlink" title="文本加粗"></a><strong>文本加粗</strong></h4><p>** 正常显示星号 **</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre class=" language-markdown"><code class="language-markdown">\   反斜线`   反引号<span class="token list punctuation">*</span>   星号_   下划线<span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span>  花括号[]  方括号()  小括号<span class="token title important"><span class="token punctuation">#</span>   井字号</span><span class="token list punctuation">+</span>   加号<span class="token list punctuation">-</span>   减号.   英文句点!   感叹号</code></pre><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><p>支持HTML</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><pre><code>使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑&lt;kbd&gt; &lt;/kbd&gt; -- 白色框框</code></pre><p>效果：<br>使用 Ctrl+Alt+Del 重启电脑</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>建议打开大纲视图<code>Ctrl + Shift + 1</code></li><li>插入表格需要顶格写，否则无法显示</li><li>语法无须刻意记忆，右键可查询</li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>参考链接1：<a href="https://www.simon96.online/2018/10/18/Typora%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%89/">Typora入门（中文版）</a></p><p>参考链接2：<a href="https://www.jianshu.com/p/b7fd16a44508">Typora</a></p><p>参考链接3：<a href="https://www.jianshu.com/p/65ab196bef04">Markdown代码块与语法高亮</a></p><p>参考链接4：<a href="https://www.cnblogs.com/anliux/p/10805103.html">Markdown使用-表格及其居中等格式</a></p><p>参考链接5：<a href="https://www.cnblogs.com/rossoneri/p/4446440.html">Markdown语法小结</a></p><p>参考链接6：<a href="https://www.runoob.com/markdown/md-tutorial.html">Runoob：Markdown教程</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
